<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2023/06/05/hello-world/"/>
    <url>/blog/2023/06/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[GO] golang中优雅设置参数默认值</title>
    <link href="/blog/2023/04/13/GO-golang%E4%B8%AD%E4%BC%98%E9%9B%85%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
    <url>/blog/2023/04/13/GO-golang%E4%B8%AD%E4%BC%98%E9%9B%85%E8%AE%BE%E7%BD%AE%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在使用 golang 重构 python 站点时，遇到了一个有趣的事情。就是在 python 函数中参数是可以设置默认值的，这样在函数调用时，就不需要每个参数都传一个值，其实这也是变相的实现重载功能。但是我发现在 golang 中参数是不能设置默认值的，但是基于程序员的直觉，相信此事没那么简单，于是抱着打破沙锅问到底的态度，就有了这篇文章。</p><h2 id="不设置默认值带来的不便"><a href="#不设置默认值带来的不便" class="headerlink" title="不设置默认值带来的不便"></a>不设置默认值带来的不便</h2><p>首先，通过一个例子，说明我在编码过程中遇到的问题。对于平台后端开发工程师来说，会经常遇到以下场景：<br>通过</p><ul><li>通过多种条件查询数据库记录，比如：select * from user where user_name in (xxx, xxx, xx) and user_region = “shanghai” order by id desc；</li><li>需要在不同功能模块做以上方式查询。</li></ul><p>基于此，我将这些查询方式抽象成一个方法，之后所有的功能模块，都可以使用该方法进行多条件联合查询数据记录，具体抽象如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">DBQueryAllWithConditions(<span class="hljs-params">ctx</span> <span class="hljs-params">context</span>.Context, <span class="hljs-params">orderBy</span> <span class="hljs-params">map</span>[<span class="hljs-params">string</span>]<span class="hljs-params">string</span>, <span class="hljs-params">eqFilters</span> <span class="hljs-params">map</span>[<span class="hljs-params">string</span>]<span class="hljs-params">interface</span>&#123;&#125;, <span class="hljs-params">inFilters</span> <span class="hljs-params">map</span>[<span class="hljs-params">string</span>]<span class="hljs-params">interface</span>&#123;&#125;, <span class="hljs-params">likeFilters</span> <span class="hljs-params">map</span>[<span class="hljs-params">string</span>]<span class="hljs-params">string</span>)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="研读开源代码的优雅实现"><a href="#研读开源代码的优雅实现" class="headerlink" title="研读开源代码的优雅实现"></a>研读开源代码的优雅实现</h2><h2 id="改进自己的代码"><a href="#改进自己的代码" class="headerlink" title="改进自己的代码"></a>改进自己的代码</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>GO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Kubernetes] Kubernetes 核心组件之 kube-apiserver</title>
    <link href="/blog/2021/11/15/Kubernetes-Kubernetes-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%B9%8B-kube-apiserver/"/>
    <url>/blog/2021/11/15/Kubernetes-Kubernetes-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%B9%8B-kube-apiserver/</url>
    
    <content type="html"><![CDATA[<p><code>kube-apiserver</code> 是 <code>Kubernetes</code> 最重要的核心组件之一，主要能提供的功能如下：</p><ul><li>给集群其他组件提供数据交互以及通信枢纽功能，以<code>RESTful API</code> 的形式提供其他组件查询，修改集群状态的 <code>CURD（Create，Read，Update，Detele）</code>接口，然后将状态储存到 <code>etcd</code> 中;</li><li>为用户请求接入认证，授权以及准入控制等功能；</li><li>并且可以用来处理乐观锁， 当有并发更新的情况， 对对象做更改就不会被其他客户端覆盖。<span id="more"></span></li></ul><h3 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h3><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><code>kube-apiserver</code> 提供了 <code>Kubernetes</code> 的 <code>REST API</code>，实现了认证、授权、准入控制等安全校验功能，同时也负责集群状态的存储操作（通过 <code>etcd</code>）。</p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><h4 id="准入控制"><a href="#准入控制" class="headerlink" title="准入控制"></a>准入控制</h4><h3 id="API-访问示例"><a href="#API-访问示例" class="headerlink" title="API 访问示例"></a>API 访问示例</h3><p><code>kube-apiserver</code> 提供了为每种语言提供了 <code>SDK</code>，方便用户访问集群其他组件，以及将数据存储或更新到<code>etcd</code>中，如下：</p><ul><li><a href="https://github.com/kubernetes/client-go">GO Client</a></li><li><a href="https://github.com/kubernetes-client/python">Python Client</a></li><li><a href="https://github.com/kubernetes-client/javascript">JavaScipt Client</a></li><li><a href="https://github.com/kubernetes-client/java">Java Client</a></li><li><a href="https://github.com/kubernetes-client/csharp">CSharp Client</a></li><li>其他<a href="https://www.openapis.org/">OpenAPI</a>支持的语言，可以通过<a href="https://github.com/kubernetes-client/gen">gen</a>工具生成相应的 <code>Client</code>.</li></ul><h4 id="kubectl-访问"><a href="#kubectl-访问" class="headerlink" title="kubectl 访问"></a>kubectl 访问</h4><ul><li><p>查询 <code>kube-apiserver</code> 支持<code>API</code>的版本</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ kubectl api-versions<br>admissionregistration.k8s.io/v1<br>admissionregistration.k8s.io/v1beta1<br>apiextensions.k8s.io/v1<br>apiextensions.k8s.io/v1beta1<br>apps/v1<br><br><span class="hljs-keyword">.</span>..<br><br>scheduling.k8s.io/v1<br>scheduling.k8s.io/v1beta1<br>storage.k8s.io/v1<br>storage.k8s.io/v1beta1<br>traefik.containo.us/v1alpha1<br>v1<br>xgboostjob.kubeflow.org/v1<br><br></code></pre></td></tr></table></figure></li><li><p>查询 <code>kube-apiserver</code> 支持<code>API</code>的资源对象</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl api-resources<br>NAME                              SHORTNAMES        APIGROUP                       NAMESPACED   KIND<br>bindings                                                                           <span class="hljs-literal">true</span>         Binding<br>componentstatuses                 cs                                               <span class="hljs-literal">false</span>        ComponentStatus<br>configmaps                        cm                                               <span class="hljs-literal">true</span>         ConfigMap<br><br>... <br><br>tlsoptions                                          traefik.containo.us            <span class="hljs-literal">true</span>         TLSOption<br>tlsstores                                           traefik.containo.us            <span class="hljs-literal">true</span>         TLSStore<br>traefikservices                                     traefik.containo.us            <span class="hljs-literal">true</span>         TraefikService<br>xgboostjobs                                         xgboostjob.kubeflow.org        <span class="hljs-literal">true</span>         XGBoostJob<br><br></code></pre></td></tr></table></figure></li><li><p>查看 <code>kube-apiserver</code> 的 <code>v1/namepsace</code> 信息</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">$ kubectl <span class="hljs-keyword">get</span> <span class="hljs-operator">--</span>raw <span class="hljs-operator">/</span>api<span class="hljs-operator">/</span>v1<span class="hljs-operator">/</span>namespaces<br>&#123;<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;NamespaceList&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;190115288&quot;</span>&#125;,<span class="hljs-string">&quot;items&quot;</span>:[&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;airflow&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/airflow&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;f4756c7a-8bd7-4988-a69c-c849a3c035be&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;79499605&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-05-06T07:39:19Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-create&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-05-06T07:39:19Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;crise&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/crise&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;6f943c7a-8419-4c95-bf5a-2972f3631aab&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;155793497&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-09-26T05:09:22Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-create&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-09-26T05:09:22Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/default&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;545db544-c735-4d06-a600-981144f245a8&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;157&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:33Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kube-apiserver&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:33Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;elastic&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/elastic&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;adcddefd-2a71-4b65-af74-ec4d5ac854b4&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;132059434&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-08-10T08:36:48Z&quot;</span>,<span class="hljs-string">&quot;labels&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;elastic&quot;</span>&#125;,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;Go-http-client&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-08-10T08:36:48Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:metadata&quot;</span>:&#123;<span class="hljs-string">&quot;f:labels&quot;</span>:&#123;<span class="hljs-string">&quot;.&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;f:name&quot;</span>:&#123;&#125;&#125;&#125;,<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kafka&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/kafka&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;82f78a4a-b135-49af-a6d2-34b162deff34&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;126083706&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-07-30T06:28:47Z&quot;</span>,<span class="hljs-string">&quot;labels&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kafka&quot;</span>&#125;,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;Go-http-client&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-07-30T06:28:47Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:metadata&quot;</span>:&#123;<span class="hljs-string">&quot;f:labels&quot;</span>:&#123;<span class="hljs-string">&quot;.&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;f:name&quot;</span>:&#123;&#125;&#125;&#125;,<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kube-node-lease&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/kube-node-lease&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;16073100-6a4c-4275-9cb4-914d16e92dd9&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;43&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kube-apiserver&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kube-public&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/kube-public&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;f6077460-b5ab-4250-ad00-bd7a32745873&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;41&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kube-apiserver&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kube-system&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/kube-system&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;4671dc1b-9f93-4c23-be43-65579ff03293&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;1051&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>:<span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Namespace<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>annotations<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>kube-system<span class="hljs-subst">\&quot;</span>&#125;&#125;<span class="hljs-subst">\n</span>&quot;</span>&#125;,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kube-apiserver&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:25:32Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;,&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-client-side-apply&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:29:44Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:metadata&quot;</span>:&#123;<span class="hljs-string">&quot;f:annotations&quot;</span>:&#123;<span class="hljs-string">&quot;.&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;f:kubectl.kubernetes.io/last-applied-configuration&quot;</span>:&#123;&#125;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;kubeflow-operators&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/kubeflow-operators&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;7a506123-310a-48b7-8c4c-ea95238ed559&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;31999589&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-01-28T09:08:10Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-create&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-01-28T09:08:10Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;monitoring&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/monitoring&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;28f94d9b-781a-4503-8704-05be7fc0b03f&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;1932&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:34:49Z&quot;</span>,<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>:<span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Namespace<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>annotations<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>monitoring<span class="hljs-subst">\&quot;</span>&#125;&#125;<span class="hljs-subst">\n</span>&quot;</span>&#125;,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-client-side-apply&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:34:49Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:metadata&quot;</span>:&#123;<span class="hljs-string">&quot;f:annotations&quot;</span>:&#123;<span class="hljs-string">&quot;.&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;f:kubectl.kubernetes.io/last-applied-configuration&quot;</span>:&#123;&#125;&#125;&#125;,<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;portainer&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/portainer&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;65ce6ed6-be89-4da5-86da-8a5decf8b190&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;45415995&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2021-02-25T08:26:29Z&quot;</span>,<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;kubectl.kubernetes.io/last-applied-configuration&quot;</span>:<span class="hljs-string">&quot;&#123;<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Namespace<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>annotations<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>portainer<span class="hljs-subst">\&quot;</span>&#125;&#125;<span class="hljs-subst">\n</span>&quot;</span>&#125;,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-client-side-apply&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2021-02-25T08:26:29Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:metadata&quot;</span>:&#123;<span class="hljs-string">&quot;f:annotations&quot;</span>:&#123;<span class="hljs-string">&quot;.&quot;</span>:&#123;&#125;,<span class="hljs-string">&quot;f:kubectl.kubernetes.io/last-applied-configuration&quot;</span>:&#123;&#125;&#125;&#125;,<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;rook-ceph&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/rook-ceph&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;e4756739-9b75-43ac-8870-60191e336917&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;1716232&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-16T07:37:55Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-create&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-16T07:37:55Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;,&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;traefik-system&quot;</span>,<span class="hljs-string">&quot;selfLink&quot;</span>:<span class="hljs-string">&quot;/api/v1/namespaces/traefik-system&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>:<span class="hljs-string">&quot;ed85f7ef-2805-4ba7-84d1-5ae430471202&quot;</span>,<span class="hljs-string">&quot;resourceVersion&quot;</span>:<span class="hljs-string">&quot;1381&quot;</span>,<span class="hljs-string">&quot;creationTimestamp&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:31:22Z&quot;</span>,<span class="hljs-string">&quot;managedFields&quot;</span>:[&#123;<span class="hljs-string">&quot;manager&quot;</span>:<span class="hljs-string">&quot;kubectl-create&quot;</span>,<span class="hljs-string">&quot;operation&quot;</span>:<span class="hljs-string">&quot;Update&quot;</span>,<span class="hljs-string">&quot;apiVersion&quot;</span>:<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;2020-11-12T07:31:22Z&quot;</span>,<span class="hljs-string">&quot;fieldsType&quot;</span>:<span class="hljs-string">&quot;FieldsV1&quot;</span>,<span class="hljs-string">&quot;fieldsV1&quot;</span>:&#123;<span class="hljs-string">&quot;f:status&quot;</span>:&#123;<span class="hljs-string">&quot;f:phase&quot;</span>:&#123;&#125;&#125;&#125;&#125;]&#125;,<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;finalizers&quot;</span>:[<span class="hljs-string">&quot;kubernetes&quot;</span>]&#125;,<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;phase&quot;</span>:<span class="hljs-string">&quot;Active&quot;</span>&#125;&#125;]&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>通过启动 <code>proxy</code> 获取集群配置信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl proxy --port=<span class="hljs-number">8081</span> &amp; curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/api/</span><br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;APIVersions&quot;</span>,<br>  <span class="hljs-string">&quot;versions&quot;</span>: [<br>    <span class="hljs-string">&quot;v1&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;serverAddressByClientCIDRs&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;clientCIDR&quot;</span>: <span class="hljs-string">&quot;0.0.0.0/0&quot;</span>,<br>      <span class="hljs-string">&quot;serverAddress&quot;</span>: <span class="hljs-string">&quot;10.114.1.100:6443&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看集群各组件信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl cluster-info<br>Kubernetes master is running at https:<span class="hljs-regexp">//</span><span class="hljs-number">10.114</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6443</span><br>CoreDNS is running at https:<span class="hljs-regexp">//</span><span class="hljs-number">10.114</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6443</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>kube-system<span class="hljs-regexp">/services/</span>kube-dns:dns/proxy<br>kubernetes-dashboard is running at https:<span class="hljs-regexp">//</span><span class="hljs-number">10.114</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6443</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>kube-system<span class="hljs-regexp">/services/</span>https:kubernetes-dashboard:/proxy<br>Metrics-server is running at https:<span class="hljs-regexp">//</span><span class="hljs-number">10.114</span>.<span class="hljs-number">1.100</span>:<span class="hljs-number">6443</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>kube-system<span class="hljs-regexp">/services/</span>https:metrics-server:/proxy<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="curl-访问"><a href="#curl-访问" class="headerlink" title="curl 访问"></a>curl 访问</h4><ul><li><p>在 pod 里面访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ TOKEN=$(cat <span class="hljs-regexp">/run/</span>secrets<span class="hljs-regexp">/kubernetes.io/</span>serviceaccount/token)<br>$ CACERT=<span class="hljs-regexp">/run/</span>secrets<span class="hljs-regexp">/kubernetes.io/</span>serviceaccount/ca.crt<br>$ curl --cacert <span class="hljs-variable">$CACERT</span> --header <span class="hljs-string">&quot;Authorization: Bearer $TOKEN&quot;</span>  https:<span class="hljs-regexp">//</span><span class="hljs-variable">$KUBERNETES_SERVICE_HOST</span>:<span class="hljs-variable">$KUBERNETES_SERVICE_PORT</span>/api<br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;APIVersions&quot;</span>,<br>  <span class="hljs-string">&quot;versions&quot;</span>: [<br>    <span class="hljs-string">&quot;v1&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;serverAddressByClientCIDRs&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;clientCIDR&quot;</span>: <span class="hljs-string">&quot;0.0.0.0/0&quot;</span>,<br>      <span class="hljs-string">&quot;serverAddress&quot;</span>: <span class="hljs-string">&quot;10.114.1.110:6443&quot;</span>(另外一个master节点ip)<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 master 节点上访问</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-attribute">APISERVER</span>=$(kubectl<span class="hljs-built_in"> config </span>view | grep<span class="hljs-built_in"> server </span>| cut -f 2- -d <span class="hljs-string">&quot;:&quot;</span> | tr -d <span class="hljs-string">&quot; &quot;</span>)<br>$ <span class="hljs-attribute">TOKEN</span>=$(kubectl describe<span class="hljs-built_in"> secret </span>$(kubectl <span class="hljs-built_in">get</span> secrets | grep<span class="hljs-built_in"> default </span>| cut -f1 -d <span class="hljs-string">&#x27; &#x27;</span>) | grep -E <span class="hljs-string">&#x27;^token&#x27;</span>| cut -f2 -d<span class="hljs-string">&#x27;:&#x27;</span>| tr -d <span class="hljs-string">&#x27;\t&#x27;</span>)<br>$ curl <span class="hljs-variable">$APISERVER</span>/api --header <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$TOKEN</span>&quot;</span> --insecure<br>&#123;<br>  <span class="hljs-string">&quot;kind&quot;</span>: <span class="hljs-string">&quot;Status&quot;</span>,<br>  <span class="hljs-string">&quot;apiVersion&quot;</span>: <span class="hljs-string">&quot;v1&quot;</span>,<br>  <span class="hljs-string">&quot;metadata&quot;</span>: &#123;<br><br>  &#125;,<br>  <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;Failure&quot;</span>,<br>  <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Unauthorized&quot;</span>,<br>  <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;Unauthorized&quot;</span>,<br>  <span class="hljs-string">&quot;code&quot;</span>: 401<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li><li><p><a href="https://kubernetes.feisky.xyz/concepts/components/apiserver">kube-apiserver</a></p></li><li><p><a href="https://kubernetes.io/zh/docs/concepts/overview/components/">kubernetes 组件</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>api-server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Kubernetes] Kubernetes 中的弹性伸缩以及自动扩容</title>
    <link href="/blog/2021/01/24/Kubernetes-Kubernetes-%E4%B8%AD%E7%9A%84%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9/"/>
    <url>/blog/2021/01/24/Kubernetes-Kubernetes-%E4%B8%AD%E7%9A%84%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>弹性伸缩</tag>
      
      <tag>自动扩容</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020 年终总结</title>
    <link href="/blog/2021/01/12/2020-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2021/01/12/2020-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一直以来自己是不喜欢将一些总结放到博客里来的，感觉这个还是挺私密的，是自己一年的发展回顾。但是看了很多大佬的博客，他们都很擅于总结自己的一年，并且也会将之发到自己的博客上，我感觉这样也挺好的。自己之前都是将这些总结放到本地存储，但这样有时写了一会就不想去写了，很容易虎头蛇尾。因此我决定以后可以将一些总结，感触什么的放到博客里，以此来监督自己一直坚持下去~</p><span id="more"></span><p>2020，一个不平凡的一年，这整年人人都基本是带着口罩过来的，直到现在还是无法摆脱带口罩，每天出行仍需带着上地铁，进公司。在年初，因为疫情影响，相信很多人都是被困在家远程办公。刚开始在家办公，自己还是不适应的，没有公司的那种开发氛围，很多需求也不能面对面及时的沟通得以解决，这样还是挺不方便的。但是后来，随着在家办公的时间长了，感觉在家办公也不错，至少节省了上下班通勤路上的时间，每天从床上爬起来就可以投入工作，这种感觉还是挺好的。当然这样对于大多数人工作效率肯定是很低的，所以公司还是会尽量要求员工在家隔离完就需要回公司办公了，因此自己大概在今年3月份回到联想大厦办公了。</p><p>其实自己在年初的时候给自己的2020定了一些计划的，但是关于实现与否，还真是偏差甚远。首先是打算这一年换一份工作的，最好是NLP算法工程师相关的工作。在今年的前三个月里，自己还是很认真的在学习NLP相关的知识，但是后面发现自己还是很难去找这相关的工作，加上后面在联想又大部分时间在做开发相关的工作，所以后面也就没再学习了。关于跳槽，从今年8月份开始更新几个网站的简历，然后也是8月份开始陆续接到了很多猎头的电话，也面试了很多了公司，最终拿了几个offer，待遇什么的较联想这边也有一定的涨幅。最后选择了一家互联网+金融的公司，信也科技，但不是算法相关的岗位，不过也挺符合自己的发展方向的，目前主要是机器学习容器云平台开发，主要是<br>Python / Go 作为技术栈, 基于 Kubernetes / Docker 打造基于云原生上传数据集，标注，特征提取，训练以及模型部署一体化的机器学习平台。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[GO] — 解析 GOROOT、GOPATH 以及 ubuntu 中构建 golang 项目</title>
    <link href="/blog/2020/12/27/GO-%E2%80%94-%E8%A7%A3%E6%9E%90-GOROOT%E3%80%81GOPATH-%E4%BB%A5%E5%8F%8A-UBUNTU-%E4%B8%AD%E6%9E%84%E5%BB%BA-golang-%E9%A1%B9%E7%9B%AE/"/>
    <url>/blog/2020/12/27/GO-%E2%80%94-%E8%A7%A3%E6%9E%90-GOROOT%E3%80%81GOPATH-%E4%BB%A5%E5%8F%8A-UBUNTU-%E4%B8%AD%E6%9E%84%E5%BB%BA-golang-%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>GO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gopath</tag>
      
      <tag>go-modules</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[GO] golang学习之interface接口</title>
    <link href="/blog/2020/12/26/GO-%E2%80%94-Golang%E5%AD%A6%E4%B9%A0%E4%B9%8Binterface%E6%8E%A5%E5%8F%A3/"/>
    <url>/blog/2020/12/26/GO-%E2%80%94-Golang%E5%AD%A6%E4%B9%A0%E4%B9%8Binterface%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>GO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>interface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Kubernetes] 认识一下Kubernetes</title>
    <link href="/blog/2020/10/29/Kubernetes-%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8BKubernetes/"/>
    <url>/blog/2020/10/29/Kubernetes-%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8BKubernetes/</url>
    
    <content type="html"><![CDATA[<h2 id="有哪些组件"><a href="#有哪些组件" class="headerlink" title="有哪些组件"></a>有哪些组件</h2><p>Kubernetes 集群分为两个部分：</p><ul><li>Kubernetes 控制平面</li><li>（工作）节点</li></ul><p>其中控制平面的组件有：</p><ul><li>Etcd 分布式持久化存储</li><li>API Server</li><li>Kube Scheduler</li><li>Kube Controller</li></ul><p>运行容器任务依赖于每个工作节点上运行的组件，包括：</p><ul><li>Kubelet</li><li>Kubelet 服务代理（kube proxy）</li><li>容器运行时（docker，rkt，containerd或者其他）</li></ul><!--more>除了控制平面以及工作节点的组件，还有几个附件组件，如下：* Kubernetes DNS 服务器* 仪表板* Igress 控制器* Heapster（容器集群监控）* 容器网络接口插件### 组件如何通信Kubernetes 系统组件间只能通过 API Server 通信，他们之间不会直接通信。API Server 是和 etcd 通信的唯一组件，其他组件都不会直接和 etcd 通信，而是通过 API Server 来修改集群的状态。### 检查控制平面组件的状态API Server 对外暴露了一个名为 ComponentStatus 的 API 资源，用来显示每个控制平面组件的健康状态。可以通过 kubectl 列出各个组件以及它们的状态：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[root@<span class="hljs-keyword">bigdatafat041120 </span>~]<span class="hljs-comment"># kubectl get componentstatuses</span><br><span class="hljs-symbol">Warning:</span> <span class="hljs-built_in">v1</span> ComponentStatus is deprecated in <span class="hljs-built_in">v1</span>.<span class="hljs-number">19</span>+<br>NAME                 STATUS    MESSAGE             ERROR<br><span class="hljs-keyword">scheduler </span>           Healthy   ok<br>controller-manager   Healthy   ok<br>etcd<span class="hljs-number">-1</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd<span class="hljs-number">-2</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd<span class="hljs-number">-0</span>               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Etcd-组件"><a href="#Etcd-组件" class="headerlink" title="Etcd 组件"></a>Etcd 组件</h2><h2 id="API-Server-组件"><a href="#API-Server-组件" class="headerlink" title="API Server 组件"></a>API Server 组件</h2><p><code>Kubernetes API Server</code> 作为中心组件，其他组件或者客户端（如 <code>kubectl</code>）都回去调用它。其以<code>RESTful API</code> 的形式提供了可以查询，修改集群状态的 <code>CURD（Create，Read，Update，Detele）</code>接口，然后将状态储存到 <code>etcd</code> 中。</p><p><code>API Server</code> 除了提供一种一致的方式将对象存储到 <code>etcd</code>, 也对这些对象做校验，<br>这样客户端就无法存入非法的对象了（直接写入存储的话是有可能的）。除了校验，<br>还会处理乐观锁， 这样对于并发更新的情况， 对对象做更改就不会被其他客户端覆盖。</p><h3 id="API-Server-如何创建一个资源"><a href="#API-Server-如何创建一个资源" class="headerlink" title="API Server 如何创建一个资源"></a>API Server 如何创建一个资源</h3><p><code>API Server</code> 的客户端之一就是刚开始介绍的命令行工作 <code>kubectl</code>。当以 <code>yaml</code> 文件创建一个资源，<code>kubectl</code> 通过一个 <code>HTTP POST</code> 请求将文件内容发布到 <code>API Server</code>。</p><ul><li><p>通过认证插件认证客户端</p></li><li><p>通过授权插件授权客户端</p></li><li><p>通过准入控制插件验证 <code>AND/OR</code> 修改资源请求<br>如果请求尝试创建，修改或者删除从一个资源，请求需要经过准入控制插件的验证。服务器会配置多个准入控制插件，这些插件会因为各种原因修改资源，可能会初始化资源定义中漏配的字段为默认值，甚至重写他们。插件甚至还会去修改并不在请求中的相关资源，同时也会因为某些原因拒绝一个请求。<br>准入控制插件包括：</p><ul><li>AlwayPullImages —— 重写 pod 的 imagePullPolicy 为 Always，强制每次部署 pod 时拉取镜像；</li><li>ServiceAccount —— 未明确定义服务账户的使用默认账户；</li><li>NamespaceLifecycle —— 防止在命名空间中创建正在呗删除的 pod，或者在不存在的命令空间中创建 pod；</li><li>ResourceQuota —— 保证特定命名空间中的 pod 只能使用该命名空间分配数量的资源，如 CPU 和内存。</li></ul></li><li><p>验证资源以及持久化存储<br>请求通过了所有的准入控制插件后，API Server 会验证存储到 etcd 的对象，然后返回一个响应给客户端。</p></li></ul><h2 id="Kube-Scheduler-组件"><a href="#Kube-Scheduler-组件" class="headerlink" title="Kube Scheduler 组件"></a>Kube Scheduler 组件</h2><h3 id="默认的调度算法"><a href="#默认的调度算法" class="headerlink" title="默认的调度算法"></a>默认的调度算法</h3><p>选择节点进行调度，可以分解为两部分，如下：</p><ul><li>过滤所有节点，找出能分配 pod 的可用节点列表；</li><li>对可用节点按优先级排序，找出最优节点，如果多个节点都有最高的优先级分数，则循环分配，确保平均分配的 pods。</li></ul><h3 id="使用多个调用器"><a href="#使用多个调用器" class="headerlink" title="使用多个调用器"></a>使用多个调用器</h3><p>可以在集群中运行多个调度器而非单个，然后，对每一个 <code>pod</code>，可以通过在 <code>pod</code> 特性中设置 <code>schedulerName</code> 属性指定调度器来调度特定的 pod。<br>未设置该属性的 <code>pod</code> 由默认调度器调度， 因此其<code>schedulerName</code> 被设置为<br><code>default-scheduler</code> 。其他设置了该属性的 <code>pod</code> 会被默认调度器忽略掉， 它们要<br>么是手动调用， 要么被监听这类 <code>pod</code> 的调度器调用。<br>可以实现自己的调度器， 部署到集群， 或者可以部署有不同配置项的额外<br><code>Kubernetes</code> 调度器实例。</p><h2 id="Kube-Controller-控制器组件"><a href="#Kube-Controller-控制器组件" class="headerlink" title="Kube-Controller 控制器组件"></a>Kube-Controller 控制器组件</h2><p>如前面提到的， <code>API Server</code> 只做了存储资源到 <code>etcd</code> 和通知客户端有变更的工作。<br>调度器则只是给 <code>pod</code> 分配节点， 所以需要有活跃的组件确保系统真实状态朝 <code>API Server</code> 定义的期望的状态收敛。这个工作由控制器管理器里的控制器来实现。<br>单个控制器、管理器进程当前组合了多个执行不同非冲突任务的控制器。这些<br>控制器最终会被分解到不同的进程， 如果需要的话， 我们能够用自定义实现替换它<br>们每一个。其中控制器包括:</p><ul><li>Replication 管理器（ReplicationController 资源管理器）</li><li>ReplicaSet、DaemonSet 以及 Job Controller</li><li>Deployment Controller</li><li>StatefulSet Controller</li><li>Node Controller</li><li>Service Controller</li><li>Endpoints Controller</li><li>Namespace Controller</li><li>PersistentVolume Controller</li><li>其他</li></ul><p>控制器执行一个“调和”循环，将实际状态调整为期望状态（在资源spec部分定义），然后将新的实际状态写入资源的 status 部分。控制器利用监听机制来订阅变更，但是由于使用监听机制并不保证控制器不会漏掉时间，所以仍需要定期执行重列举操作来确保不会丢掉什么。</p><h2 id="Worker-节点的组件介绍"><a href="#Worker-节点的组件介绍" class="headerlink" title="Worker 节点的组件介绍"></a>Worker 节点的组件介绍</h2><h3 id="Kubelet-组件"><a href="#Kubelet-组件" class="headerlink" title="Kubelet 组件"></a>Kubelet 组件</h3><h3 id="Kubernetes-Service-Proxy-组件"><a href="#Kubernetes-Service-Proxy-组件" class="headerlink" title="Kubernetes Service Proxy 组件"></a>Kubernetes Service Proxy 组件</h3><p>除了有 <code>Kubelet</code>，每个工作节点还会运行 <code>kube-proxy</code>组件，用于确保客户端可以用过 <code>Kubernetes API</code> 连接到你定义的服务。<code>kube-proxy</code> 确保对服务 <code>IP</code> 和端口的连接最终<br>能到达支持服务（或者其他，非 <code>pod</code> 服务终端）的某个 <code>pod</code> 处。如果有多个 <code>pod</code> 支<br>撑一个服务，那么代理会发挥对 <code>pod</code> 的负载均衡作用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[LeetCode] 数据结构之树</title>
    <link href="/blog/2020/10/18/LeetCode-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/"/>
    <url>/blog/2020/10/18/LeetCode-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[AI] 模型部署实践（2）Tensorflow Serving 部署方式</title>
    <link href="/blog/2020/09/29/AI-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5%EF%BC%882%EF%BC%89Tensorflow-Serving%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
    <url>/blog/2020/09/29/AI-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5%EF%BC%882%EF%BC%89Tensorflow-Serving%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>模型部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TF Serving</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Kubernetes] 基于kubeadm搭建一个完整的Kubernetes集群</title>
    <link href="/blog/2020/09/29/Kubernetes-%E5%9F%BA%E4%BA%8Ekubeadm%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84Kubernetes%E9%9B%86%E7%BE%A4/"/>
    <url>/blog/2020/09/29/Kubernetes-%E5%9F%BA%E4%BA%8Ekubeadm%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84Kubernetes%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Kubernetes 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 是 Google 于 2014 年 6 月基于其内部使用的 Borg 系统开源出来的容器编排调度引擎，Google 将其作为初始和核心项目贡献给 CNCF（云原生计算基金会），近年来逐渐发展出了云原生生态。</p><p>Kubernetes 的目标不仅仅是一个编排系统，而是提供一个规范用以描述集群的架构，定义服务的最终状态，使系统自动地达到和维持该状态。Kubernetes 作为云原生应用的基石，相当于一个云操作系统，其重要性不言而喻。</p><span id="more"></span><h3 id="为什么需要-Kubernetes，它能做什么"><a href="#为什么需要-Kubernetes，它能做什么" class="headerlink" title="为什么需要 Kubernetes，它能做什么?"></a>为什么需要 Kubernetes，它能做什么?</h3><p>容器是打包和运行应用程序的好方式。在生产环境中，您需要管理运行应用程序的容器，并确保不会停机。例如，如果一个容器发生故障，则需要启动另一个容器。如果系统处理此行为，会不会更容易？</p><p>这就是 Kubernetes 的救援方法！Kubernetes 为您提供了一个可弹性运行分布式系统的框架。Kubernetes 会满足您的扩展要求、故障转移、部署模式等。例如，Kubernetes 可以轻松管理系统的 Canary 部署。</p><p>Kubernetes 能够提供以下一些功能：</p><ul><li>服务发现和负载均衡<br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果到容器的流量很大，    Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li><li>存储编排<br>Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商等。</li><li>自动部署和回滚<br>您可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为所需状态。例如，您可以自动化 Kubernetes 来为您的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</li><li>自动二进制打包<br>Kubernetes 允许您指定每个容器所需 CPU 和内存（RAM）。当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li><li>自我修复<br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li><li>密钥与配置管理<br>Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li></ul><p>因此综上，我们需要好好学习 Kubernetes 这个强大的云操作系统，增强自身的竞争力。工欲善其事，必先利其器，本篇也是 Kubernetes 系列的第一篇博文，讲述如何利用 Kubeadm 这个工具来搭建一套供自己学习的 Kubernetes 集群。</p><h2 id="Kubeadm-到底是什么？"><a href="#Kubeadm-到底是什么？" class="headerlink" title="Kubeadm 到底是什么？"></a>Kubeadm 到底是什么？</h2><p>Kubeadm 能够用以创建一个符合最佳实践的最小化 Kubernetes 集群。事实上，你可以使用 kubeadm 配置一个通过 Kubernetes 一致性测试的集群。 kubeadm 还支持其他集群生命周期功能， 例如：启动引导令牌和集群升级。</p><p>kubeadm 工具很棒，如果你需要：</p><ul><li>一个尝试 Kubernetes 的简单方法。</li><li>一个现有用户可以自动设置集群并测试其应用程序的途径。</li><li>其他具有更大范围的生态系统和/或安装工具中的构建模块。</li></ul><p>你可以在各种机器上安装和使用 kubeadm：笔记本电脑， 一组云服务器，Raspberry Pi 等。无论是部署到云还是本地，你都可以将 kubeadm 集成到预配置系统中，例如 Ansible 或 Terraform。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一台或多台运行着下列系统的机器，去阿里云申请或者自己物理机用 VMvare 新建都行：<ul><li>Ubuntu 16.04+</li><li>Debian 9+</li><li>CentOS 7</li><li>Red Hat Enterprise Linux (RHEL) 7</li><li>Fedora 25+</li><li>HypriotOS v1.0.1+</li><li>Container Linux (测试 1800.6.0 版本)</li></ul></li><li>单机可用资源建议 2 核 CPU、8 GB 内存或以上，再小的话问题也不大，但是能调度的 Pod 数量就比较有限了</li><li>每台机器能够访问外网，因为需要拉取镜像</li><li>集群中所有计算机之间具有完全的网络连接</li></ul><h2 id="安装-Kubeadm-以及-Docker"><a href="#安装-Kubeadm-以及-Docker" class="headerlink" title="安装 Kubeadm 以及 Docker"></a>安装 Kubeadm 以及 Docker</h2><p>上述介绍过 kubeadm 的基础用法，接下来我将会介绍基于 Centos 8 安装 Kubernetes 组件以及 Docker。</p><h3 id="配置安装源"><a href="#配置安装源" class="headerlink" title="配置安装源"></a>配置安装源</h3><ul><li>配置<code>docker</code><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo -O <span class="hljs-regexp">/etc/yum</span>.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li>配置<code>kubernetes</code><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cat &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">0</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure></li><li>本地缓存<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>dnf makecache<br></code></pre></td></tr></table></figure></li></ul><h3 id="安装-Kubeadm-以及-docker"><a href="#安装-Kubeadm-以及-docker" class="headerlink" title="安装 Kubeadm 以及 docker"></a>安装 Kubeadm 以及 docker</h3><ul><li>执行以下命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> dnf <span class="hljs-literal">-y</span> install docker<span class="hljs-literal">-ce</span><br><span class="hljs-variable">$</span> systemctl enable docker<br><span class="hljs-variable">$</span> systemctl <span class="hljs-built_in">start</span> docker<br><span class="hljs-variable">$</span> dnf install <span class="hljs-literal">-y</span> kubelet<span class="hljs-literal">-1</span>.<span class="hljs-number">18.0</span> kubeadm<span class="hljs-literal">-1</span>.<span class="hljs-number">18.0</span> kubectl<span class="hljs-literal">-1</span>.<span class="hljs-number">18.0</span><br></code></pre></td></tr></table></figure></li></ul><p>这里安装了 Docker 公司发布的最新的 Docker CE（社区版），Kubernetes 相关的组件安装的 1.18.0 版本，基本是目前为止最新的版本了。</p><h2 id="部署-Kubernetes-的-Master-节点"><a href="#部署-Kubernetes-的-Master-节点" class="headerlink" title="部署 Kubernetes 的 Master 节点"></a>部署 Kubernetes 的 Master 节点</h2><p>利用 kubeadm 可以很简单的来初始化 kubernetes 集群的 master 节点，执行以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">kubeadm init \<br>  <span class="hljs-comment">--apiserver-advertise-address=192.168.0.2 \</span><br>  <span class="hljs-comment">--kubernetes-version v1.18.0 \</span><br>  <span class="hljs-comment">--service-cidr=10.1.0.0/16 \</span><br>  <span class="hljs-comment">--pod-network-cidr=10.244.0.0/16</span><br>  <br> <span class="hljs-keyword">If</span> you can<span class="hljs-symbol">&#x27;t</span> <span class="hljs-keyword">access</span> foreign websites:<br>  kubeadm init \<br>  <span class="hljs-comment">--apiserver-advertise-address=192.168.0.2 \</span><br>  <span class="hljs-comment">--image-repository registry.aliyuncs.com/google_containers \</span><br>  <span class="hljs-comment">--kubernetes-version v1.18.0 \</span><br>  <span class="hljs-comment">--service-cidr=10.1.0.0/16 \</span><br>  <span class="hljs-comment">--pod-network-cidr=10.244.0.0/16</span><br></code></pre></td></tr></table></figure><p>上述命令行参数解释：</p><ul><li><code>--apiserver-advertise-address</code>：可用于为控制平面节点的 API server 设置广播地址，</li></ul><h2 id="部署网络插件"><a href="#部署网络插件" class="headerlink" title="部署网络插件"></a>部署网络插件</h2><p>在 Kubernetes 项目“一切皆容器”的设计理念指导下，部署网络插件也是通过启动<code>pod</code>的形式来配置网络，其中有两种网络插件可供部署：</p><ul><li>部署 flannel 网络插件（详细介绍后面会在开一篇博文）：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/a70459be0084506e4ec919aa1c114638878db11b/</span>Documentation/kube-flannel.yml<br>update:  https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/v0.12.0/</span>Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure></li><li>部署 calico 网络插件：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>docs.projectcalico.org<span class="hljs-regexp">/v3.14/m</span>anifests/calico.yaml<br></code></pre></td></tr></table></figure>上述两个网络插件只需部署一个即可，部署成功与否可通过查看对应 pod 的运行状态即可：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ kubectl get pods -n kube-system<br>NAME                                       READY   STATUS    RESTARTS   AGE<br>calico-kube-controllers-<span class="hljs-number">65</span>f8bc95db-ngv7v   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-9sr5c</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-jtt5w</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>coredns-<span class="hljs-number">7</span>ff77c879f-v645l                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>coredns-<span class="hljs-number">7</span>ff77c879f-vdrcf                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>etcd-<span class="hljs-keyword">master</span>                                <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">3</span>d20h<br>kube-apiserver-<span class="hljs-keyword">master</span>                      <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">3</span>d20h<br>kube-controller-manager-<span class="hljs-keyword">master</span>             <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">3</span>d20h<br>kube-proxy-sbxzb                           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>kube-proxy-xfw7t                           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>d19h<br>kube-scheduler-<span class="hljs-keyword">master</span>                      <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">3</span>d20h<br></code></pre></td></tr></table></figure></li></ul><p>可以看到，所有的系统 Pod 都成功启动了，而刚刚部署的 calico 网络插件则在 kube-system 下面新建了一个名叫 calico-kube-controllers-65f8bc95db-ngv7v 的 Pod，一般来说，这些 Pod 就是容器网络插件在每个节点上的控制组件。</p><p>Kubernetes 支持容器网络插件，使用的是一个名叫 CNI 的通用接口，它也是当前容器网络的事实标准，市面上的所有容器网络开源项目都可以通过 CNI 接入 Kubernetes，比如 Flannel、Calico、Canal、Romana 等等，它们的部署方式也都是类似的“一键部署”。关于这些开源项目的实现细节和差异，后续会有相关的博文进行详细讲解。</p><p>至此，Kubernetes 的 Master 节点就部署完成了。如果你只需要一个单节点的 Kubernetes，现在你就可以使用了。不过，在默认情况下，Kubernetes 的 Master 节点是不能运行用户 Pod 的，所以还需要额外做一个小操作。在本篇的最后部分，我会介绍到它。</p><h2 id="部署-Kubernetes-的计算节点"><a href="#部署-Kubernetes-的计算节点" class="headerlink" title="部署 Kubernetes 的计算节点"></a>部署 Kubernetes 的计算节点</h2><p>Kubernetes 的 计算节点跟 Master 节点几乎是相同的，它们运行着的都是一个 kubelet 组件。唯一的区别在于，在 kubeadm init 的过程中，kubelet 启动后，Master 节点上还会自动运行 kube-apiserver、kube-scheduler、kube-controller-manger 这三个系统 Pod。<br>执行以下命令：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$ kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">56.12</span>:<span class="hljs-number">6443</span> --token japatq.<span class="hljs-number">5</span>vib<span class="hljs-number">0</span>jhpgmeeqsb<span class="hljs-number">2</span> \<br>    --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:<span class="hljs-keyword">c</span><span class="hljs-number">08</span>f<span class="hljs-number">2729</span>dbe<span class="hljs-number">9e2</span>b<span class="hljs-number">1</span>ce<span class="hljs-number">9</span>f<span class="hljs-number">44e6</span>d<span class="hljs-number">3159</span><span class="hljs-keyword">c</span><span class="hljs-number">493</span><span class="hljs-keyword">cc</span><span class="hljs-number">686</span>b<span class="hljs-number">2e93</span>dc<span class="hljs-number">252</span>f<span class="hljs-number">7658</span>cb<span class="hljs-number">26</span>b<span class="hljs-number">87</span>d<span class="hljs-number">726</span><br></code></pre></td></tr></table></figure><p>用以加入<code>192.168.56.12</code>这个 IP 的计算节点到集群中，以上<code>Token</code>可用<code>kubeclt token list</code>得到。</p><p>通过执行以上步骤便可以搭建好一个网络完整的 Kubernetes 集群。当然，也可以继续往集群中添加其他的插件，比如部署 Dashboard 可视化插件，部署容器存储插件等等。这个就因人而异了，留给大家自由发挥了…</p><h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><ul><li>列出集群的节点<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get nodes<br>NAME     STATUS   ROLES    AGE   <span class="hljs-keyword">VERSION</span><br><span class="hljs-keyword">master</span>   <span class="hljs-title">Ready</span>    <span class="hljs-keyword">master</span>   <span class="hljs-title">33d</span>   v1.<span class="hljs-number">18.0</span><br><span class="hljs-keyword">node</span>     <span class="hljs-title">Ready</span>    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">33</span>d   v1.<span class="hljs-number">18.0</span><br></code></pre></td></tr></table></figure></li><li>列出系统的<code>pod</code>资源<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">~]# kubectl</span> get pod -n kube-system<br>NAME                                       READY   STATUS    RESTARTS   AGE<br>calico-kube-controllers-<span class="hljs-number">65</span>f8bc95db-ngv7v   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-9sr5c</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>calico-<span class="hljs-keyword">node</span><span class="hljs-title">-jtt5w</span>                          <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>coredns-<span class="hljs-number">7</span>ff77c879f-v645l                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>coredns-<span class="hljs-number">7</span>ff77c879f-vdrcf                   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>etcd-<span class="hljs-keyword">master</span>                                <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br>kube-apiserver-<span class="hljs-keyword">master</span>                      <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br>kube-controller-manager-<span class="hljs-keyword">master</span>             <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br>kube-proxy-sbxzb                           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>kube-proxy-xfw7t                           <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">33</span>d<br>kube-scheduler-<span class="hljs-keyword">master</span>                      <span class="hljs-title">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br></code></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">使用 kubeadm 创建集群</a></li><li><a href="https://kubernetes.io/zh/docs/concepts/overview/">Kubernetes概述</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubeadm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[AI] 模型部署实践（1）Gunicorn + Falcon + Model</title>
    <link href="/blog/2020/08/31/NLP-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5%EF%BC%881%EF%BC%89Gunicorn-Falcon-Model/"/>
    <url>/blog/2020/08/31/NLP-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5%EF%BC%881%EF%BC%89Gunicorn-Falcon-Model/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>模型部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP 部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NLP] 文本摘要之PGN指针生成网络</title>
    <link href="/blog/2020/08/08/NLP-%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E4%B9%8BPGN%E6%8C%87%E9%92%88%E7%94%9F%E6%88%90%E7%BD%91%E7%BB%9C/"/>
    <url>/blog/2020/08/08/NLP-%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E4%B9%8BPGN%E6%8C%87%E9%92%88%E7%94%9F%E6%88%90%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
      <category>文本生成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PGN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式训练之PyTorch</title>
    <link href="/blog/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%AD%E7%BB%83%E4%B9%8BPyTorch/"/>
    <url>/blog/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%AD%E7%BB%83%E4%B9%8BPyTorch/</url>
    
    <content type="html"><![CDATA[<p>由于近期来自客户需求，需要部门开发的AI平台支持上 PyTorch 框架的分布式训练，因此自己也是花了大概一周的时间，仔细研究了下 PyTorch 的分布式训练，中间也遇到了不少问题，好在通过查阅相关资料大都解决了，昨天也到客户那已经部署成功了。现将关于 PyTorch 分布式训练知识总结一下，方便大家或自己以后查阅，以下内容如有总结不到位的地方，请大家不吝赐教~</p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2>]]></content>
    
    
    <categories>
      
      <category>深度学习框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式训练</tag>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第十一天</title>
    <link href="/blog/2020/07/29/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/"/>
    <url>/blog/2020/07/29/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第十天</title>
    <link href="/blog/2020/07/27/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%8D%81%E5%A4%A9/"/>
    <url>/blog/2020/07/27/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%8D%81%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ29-最小的K个数"><a href="#JZ29-最小的K个数" class="headerlink" title="JZ29 最小的K个数"></a>JZ29 最小的K个数</h3><p><strong>题目描述：</strong></p><blockquote><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p></blockquote><p><strong>解法思路：</strong><br>这题第一印象是直接将列表从小到大进行排序然后返回前K个数即可。所以本题第一种方法就是利用快排然后返回前K个数得到结果，这个方法没什么好说的，只要对快排熟悉即可。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs smali">def GetLeastNumbers_Solution(self, tinput, k):<br>    <span class="hljs-comment"># write code here</span><br>   <span class="hljs-built_in"> if </span>tinput == []<span class="hljs-built_in"> or </span>k &lt;= 0<span class="hljs-built_in"> or </span>k &gt; len(tinput):<br>       <span class="hljs-built_in"> return </span>[]<br><br>   <span class="hljs-built_in"> return </span>self.quick_sort(tinput)[:k]<br><br>def quick_sort(self, array):<br>   <span class="hljs-built_in"> if </span>len(array) &lt;= 1:<br>       <span class="hljs-built_in"> return </span>array<br><br>    pivot = array[0]<br>    less_pivot = [num for num in<span class="hljs-built_in"> array </span>if num &lt; pivot]<br>    more_pivot = [num for num in<span class="hljs-built_in"> array </span>if num &gt; pivot]<br><br>   <span class="hljs-built_in"> return </span>self.quick_sort(less_pivot) + [pivot] + self.quick_sort(more_pivot)<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   <span class="hljs-built_in"> array </span>= [4, 5, 1, 6, 2, 7, 3, 8]<br>    print(Solution().GetLeastNumbers_Solution(array, 4))<br><br>&gt;&gt;&gt; [1, 2, 3, 4]<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="JZ28-数组中出现次数超过一半的数字"><a href="#JZ28-数组中出现次数超过一半的数字" class="headerlink" title="JZ28 数组中出现次数超过一半的数字"></a>JZ28 数组中出现次数超过一半的数字</h3><p><strong>题目描述：</strong></p><blockquote><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。<br>由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p></blockquote><p><strong>解法思路：</strong><br>很朴素的做法，利用哈希进行统计出数字出现的次数，然后再与数组的长度的一半进行比较即可得到结果。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">MoreThanHalfNum_Solution</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">numbers</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">len</span>(<span class="hljs-symbol">numbers</span>) == <span class="hljs-symbol">0:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">return</span></span> <span class="hljs-symbol">0</span><br><br>        <span class="hljs-symbol">length</span> = <span class="hljs-symbol">len</span>(<span class="hljs-symbol">numbers</span>)<br>        <span class="hljs-symbol">hash_map</span> = &#123;&#125;<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> hash_map:<br>                hash_map[num] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                hash_map[num] = <span class="hljs-number">1</span><br>        nums = [num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> hash_map.keys() <span class="hljs-keyword">if</span> hash_map[num] &gt; length / <span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> nums <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    numbers = <span class="hljs-selector-attr">[1, 2, 3, 2, 2, 2, 5, 4, 2]</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.MoreThanHalfNum_Solution</span>(numbers))<br><br>&gt;&gt;&gt; <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><h3 id="JZ30-连续子数组的最大和"><a href="#JZ30-连续子数组的最大和" class="headerlink" title="JZ30 连续子数组的最大和"></a>JZ30 连续子数组的最大和</h3><p><strong>题目描述：</strong></p><blockquote><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,<br>当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？<br>例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，<br>你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><p><strong>解法思路：</strong><br>动态规划方法。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">FindGreatestSumOfSubArray</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">array</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">len</span>(<span class="hljs-symbol">array</span>) == <span class="hljs-symbol">0:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">return</span></span> <span class="hljs-symbol">0</span><br><br>        <span class="hljs-symbol">max_num</span> = <span class="hljs-symbol">array</span>[<span class="hljs-symbol">0</span>]<br>        <span class="hljs-symbol">continuous_sum</span> = <span class="hljs-symbol">0</span><br>        <span class="hljs-symbol">for</span> <span class="hljs-symbol">num</span> <span class="hljs-symbol">in</span> <span class="hljs-symbol">array:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">if</span></span> <span class="hljs-symbol">continuous_sum</span> &gt; <span class="hljs-symbol">0:</span><br><span class="hljs-symbol">                <span class="hljs-symbol">continuous_sum</span></span> += <span class="hljs-symbol">num</span><br>            <span class="hljs-symbol">else:</span><br><span class="hljs-symbol">                <span class="hljs-symbol">continuous_sum</span></span> = <span class="hljs-symbol">num</span><br>            <span class="hljs-symbol">max_num</span> = <span class="hljs-symbol">max</span>(<span class="hljs-symbol">continuous_sum, <span class="hljs-symbol">max_num</span></span>)<br><br>        <span class="hljs-symbol">return</span> <span class="hljs-symbol">max_num</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   <span class="hljs-built_in"> array </span>= [6, -3, -2, 7, -15, 1, 2, 2]<br>    print(Solution().FindGreatestSumOfSubArray(array))<br>    <br>&gt;&gt;&gt; 8<br></code></pre></td></tr></table></figure><h3 id="JZ50-数组中重复的数字"><a href="#JZ50-数组中重复的数字" class="headerlink" title="JZ50 数组中重复的数字"></a>JZ50 数组中重复的数字</h3><p><strong>题目描述：</strong></p><blockquote><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。<br>请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span><br>    <span class="hljs-comment"># 函数返回True/False</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">duplicate</span>(<span class="hljs-params">self, numbers, duplication</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(numbers) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-number">0</span><br>        stack = []<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-keyword">if</span> num &gt; <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> num <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stack:<br>                stack.append(num)<br>            <span class="hljs-keyword">else</span>:<br>               duplication.append(num)<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, duplication[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># numbers = [2, 3, 1, 0, 2, 5, 3]</span><br>    numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]<br>    <span class="hljs-built_in">print</span>(Solution().duplicate(numbers, []))<br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span>(<span class="hljs-literal">True</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第九天</title>
    <link href="/blog/2020/07/25/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B9%9D%E5%A4%A9/"/>
    <url>/blog/2020/07/25/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B9%9D%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ64-滑动窗口的最大值"><a href="#JZ64-滑动窗口的最大值" class="headerlink" title="JZ64 滑动窗口的最大值"></a>JZ64 滑动窗口的最大值</h3><p><strong>题目描述：</strong></p><blockquote><p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个：<br>{[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}，<br>{2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p></blockquote><p>这道题其实是昨天最后一道题<a href="http://localhost:4000/blog/2020/07/19/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%83%E5%A4%A9/"><code>JZ60</code></a>的升级版，其实也就是层次遍历二叉树（BFS）。层次遍历思想可以参见上一道题，只是此题需要结合二叉树的深度<code>depth</code>进行解题。在每次需要打印的地方，当深度<code>depth</code>对2取余，为0则从左到右打印，为1则反转打印。</p><p><strong>解法思路：</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">class</span> Solution:<br>    def maxInWindows(self, num, <span class="hljs-built_in">size</span>):<br>        # <span class="hljs-built_in">write</span> code here<br>        <span class="hljs-keyword">if</span> num is <span class="hljs-keyword">None</span> or <span class="hljs-built_in">size</span> &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> []<br><br>        max_list = []<br>        for i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len(num) - <span class="hljs-built_in">size</span> + <span class="hljs-number">1</span>):<br>            range_ = num[i: i+<span class="hljs-built_in">size</span>]<br>            max_list.append(<span class="hljs-built_in">max</span>(range_))<br>        <span class="hljs-keyword">return</span> max_list<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.maxInWindows</span>(<span class="hljs-selector-attr">[2, 3, 4, 2, 6, 2, 5, 1]</span>, <span class="hljs-number">2</span>))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[3, 4, 4, 6, 6, 5, 5]</span><br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="JZ40-数组中只出现一次的数字"><a href="#JZ40-数组中只出现一次的数字" class="headerlink" title="JZ40 数组中只出现一次的数字"></a>JZ40 数组中只出现一次的数字</h3><p><strong>题目描述：</strong></p><blockquote><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p></blockquote><p><strong>解法思路：</strong></p><!--more--><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    </span># 返回[<span class="hljs-symbol">a,<span class="hljs-symbol">b</span></span>] 其中<span class="hljs-symbol">ab</span>是出现一次的两个数字<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">FindNumsAppearOnce</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">array</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">array</span> <span class="hljs-symbol">is</span> <span class="hljs-symbol">None:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">return</span></span><br><br>        <span class="hljs-symbol">hash_map</span> = &#123;&#125;<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">array</span>:<br>            <span class="hljs-keyword">if</span> num <span class="hljs-keyword">in</span> hash_map:<br>                hash_map[num] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                hash_map[num] = <span class="hljs-number">1</span><br><br>        res = [num <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> hash_map.keys() <span class="hljs-keyword">if</span> hash_map[num] == <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.FindNumsAppearOnce</span>(<span class="hljs-selector-attr">[2, 3, 1, 5, 1, 3, 6, 11, 6, 0, 11, 5]</span>))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[2, 0]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第八天</title>
    <link href="/blog/2020/07/20/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%85%AB%E5%A4%A9/"/>
    <url>/blog/2020/07/20/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%85%AB%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ59-按之字形顺序打印二叉树"><a href="#JZ59-按之字形顺序打印二叉树" class="headerlink" title="JZ59 按之字形顺序打印二叉树"></a>JZ59 按之字形顺序打印二叉树</h3><p><strong>题目描述：</strong></p><blockquote><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p></blockquote><p><strong>解法思路：</strong><br>这道题其实是昨天最后一道题<a href="http://localhost:4000/blog/2020/07/19/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%83%E5%A4%A9/"><code>JZ60</code></a>的升级版，其实也就是层次遍历二叉树（BFS）。层次遍历思想可以参见上一道题，只是此题需要结合二叉树的深度<code>depth</code>进行解题。在每次需要打印的地方，当深度<code>depth</code>对2取余，为0则从左到右打印，为1则反转打印。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vim">class TreeNode:<br>    def __init__(self, <span class="hljs-keyword">x</span>):<br>        self.val = <span class="hljs-keyword">x</span><br>        self.<span class="hljs-keyword">left</span> = None<br>        self.<span class="hljs-keyword">right</span> = None<br><br><br>class Solution:<br>    def <span class="hljs-keyword">Print</span>(self, pRoot):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> pRoot <span class="hljs-keyword">is</span> None:<br>            <span class="hljs-keyword">return</span> []<br><br>        depth = <span class="hljs-number">0</span><br>        node_queue = [pRoot]<br>        <span class="hljs-keyword">res</span> = []<br><br>        <span class="hljs-keyword">while</span> node_queue:<br>            val = []<br>            length = <span class="hljs-built_in">len</span>(node_queue)<br>            <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(length):<br>                current = node_queue.<span class="hljs-keyword">pop</span>(<span class="hljs-number">0</span>)<br>                val.<span class="hljs-keyword">append</span>(current.val)<br><br>                <span class="hljs-keyword">if</span> current.<span class="hljs-keyword">left</span>:<br>                    node_queue.<span class="hljs-keyword">append</span>(current.<span class="hljs-keyword">left</span>)<br><br>                <span class="hljs-keyword">if</span> current.<span class="hljs-keyword">right</span>:<br>                    node_queue.<span class="hljs-keyword">append</span>(current.<span class="hljs-keyword">right</span>)<br><br>            <span class="hljs-keyword">if</span> depth % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">res</span>.<span class="hljs-keyword">append</span>(val)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">res</span>.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">list</span>(reversed(val)))<br><br>            depth += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">0</span>)<br>    root<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">1</span>)<br>    root<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">2</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">3</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">4</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.Print</span>(root))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[[0]</span>, <span class="hljs-selector-attr">[2, 1]</span>, <span class="hljs-selector-attr">[3, 4, 5]</span>, <span class="hljs-selector-attr">[6]</span>]<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="JZ58-对称的二叉树"><a href="#JZ58-对称的二叉树" class="headerlink" title="JZ58 对称的二叉树"></a>JZ58 对称的二叉树</h3><p><strong>题目描述：</strong></p><blockquote><p>请实现一个函数，用来判断一棵二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p></blockquote><p><strong>解法思路：</strong></p><!--more--><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.left = None<br>        <span class="hljs-variable language_">self</span>.right = None<br>        <br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSymmetrical</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, pRoot</span>):<br>        <span class="hljs-comment"># write code here</span><br>        pass<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    num = <span class="hljs-number">1</span><br>    matrix = <span class="hljs-selector-attr">[[0 for i in range(4)]</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            matrix<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = num<br>            num += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.printMatrix</span>(matrix))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.printMatrix</span>(<span class="hljs-selector-attr">[[1, 2]</span>, <span class="hljs-selector-attr">[3, 4]</span>, <span class="hljs-selector-attr">[5, 6]</span>, <span class="hljs-selector-attr">[7, 8]</span>, <span class="hljs-selector-attr">[9, 10]</span>]))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</span><br><span class="hljs-selector-attr">[1, 2, 4, 6, 8, 10, 9, 7, 5, 3]</span><br><br><br></code></pre></td></tr></table></figure><h3 id="JZ38-二叉树的下一个结点"><a href="#JZ38-二叉树的下一个结点" class="headerlink" title="JZ38 二叉树的下一个结点"></a>JZ38 二叉树的下一个结点</h3><p><strong>题目描述：</strong></p><blockquote><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.left = None<br>        <span class="hljs-variable language_">self</span>.right = None<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GetNext</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, pNode</span>):<br>        <span class="hljs-comment"># write code here</span><br>        pass<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">0</span>)<br>    root<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">1</span>)<br>    root<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">2</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">3</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">4</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution2</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <br>&gt;&gt;&gt; <span class="hljs-number">4</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="JZ38-平衡二叉树"><a href="#JZ38-平衡二叉树" class="headerlink" title="JZ38 平衡二叉树"></a>JZ38 平衡二叉树</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p></blockquote><blockquote><p>在这里，我们只需要考虑其平衡性，不需要考虑其是不是排序二叉树</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.left = None<br>        <span class="hljs-variable language_">self</span>.right = None<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">IsBalanced_Solution</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, pRoot</span>):<br>        <span class="hljs-comment"># write code here</span><br>        pass<br><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">0</span>)<br>    root<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">1</span>)<br>    root<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">2</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">3</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">4</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution2</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <br>&gt;&gt;&gt; <span class="hljs-number">4</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第七天</title>
    <link href="/blog/2020/07/19/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
    <url>/blog/2020/07/19/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ19-顺时针打印矩阵"><a href="#JZ19-顺时针打印矩阵" class="headerlink" title="JZ19 顺时针打印矩阵"></a>JZ19 顺时针打印矩阵</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p></blockquote><p><strong>解法思路：</strong><br>这道题刚开始自己一看，就是想着设置一些索引位置，按照索引位置打印来打印不就行了。后来再认真读题，发现它输入的二维矩阵大小是变化的，不是固定大小，才发现自己的想法太<code>native</code>。</p><p>看了下讨论区，发现只是需要确定几个固定位置的索引值，便可以不管输入矩阵的大小，自适应的便能够确定顺时针打印每个位置的索引，然后再根据这个索引来打印矩阵就行，还真是巧妙。其实在确定好几个顶点的位置，也就相当于确定了方向，然后不管是顺时针还是逆时针，下次都可以方便的解题了。</p><span id="more"></span><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nsis">class Solution:<br>    <span class="hljs-comment"># matrix类型为二维列表，需要返回列表</span><br>    def printMatrix(self, matrix):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-literal">top</span> = <span class="hljs-number">0</span><br>        <span class="hljs-literal">bottom</span> = len(matrix)<br>        <span class="hljs-literal">left</span> = <span class="hljs-number">0</span><br>        <span class="hljs-literal">right</span> = len(matrix[<span class="hljs-number">0</span>])<br><br>        res = []<br>        <span class="hljs-comment"># 判断是否越界</span><br>        while <span class="hljs-literal">top</span> &lt; <span class="hljs-literal">bottom</span> and <span class="hljs-literal">left</span> &lt; <span class="hljs-literal">right</span>:<br>            <span class="hljs-comment"># 最上面一行，需向右打印</span><br>            res.extend([matrix[<span class="hljs-literal">top</span>][c] for c in range(<span class="hljs-literal">left</span>, <span class="hljs-literal">right</span>)])<br>            <span class="hljs-comment"># 最右边一行，需向下打印</span><br>            res.extend([matrix[r][<span class="hljs-literal">right</span> - <span class="hljs-number">1</span>] for r in range(<span class="hljs-literal">top</span> + <span class="hljs-number">1</span>, <span class="hljs-literal">bottom</span>)])<br>            <span class="hljs-comment"># 最下面一行，需向左打印</span><br>            if <span class="hljs-literal">bottom</span> - <span class="hljs-literal">top</span> &gt; <span class="hljs-number">1</span>:<br>                res.extend([matrix[<span class="hljs-literal">bottom</span> - <span class="hljs-number">1</span>][c] for c in range(<span class="hljs-literal">right</span> - <span class="hljs-number">2</span>, <span class="hljs-literal">left</span>, -<span class="hljs-number">1</span>)]) <span class="hljs-comment"># 注意需要将右边那个值去除掉</span><br>            <span class="hljs-comment"># 最左边一行，需向上打印</span><br>            if <span class="hljs-literal">right</span> - <span class="hljs-literal">left</span> &gt; <span class="hljs-number">1</span>:<br>                res.extend([matrix[r][<span class="hljs-literal">left</span>] for r in range(<span class="hljs-literal">bottom</span> - <span class="hljs-number">1</span>, <span class="hljs-literal">top</span>, -<span class="hljs-number">1</span>)])<br><br>            <span class="hljs-literal">top</span> += <span class="hljs-number">1</span><br>            <span class="hljs-literal">bottom</span> -= <span class="hljs-number">1</span><br>            <span class="hljs-literal">left</span> += <span class="hljs-number">1</span><br>            <span class="hljs-literal">right</span> -= <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    num = <span class="hljs-number">1</span><br>    matrix = <span class="hljs-selector-attr">[[0 for i in range(4)]</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            matrix<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span> = num<br>            num += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.printMatrix</span>(matrix))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.printMatrix</span>(<span class="hljs-selector-attr">[[1, 2]</span>, <span class="hljs-selector-attr">[3, 4]</span>, <span class="hljs-selector-attr">[5, 6]</span>, <span class="hljs-selector-attr">[7, 8]</span>, <span class="hljs-selector-attr">[9, 10]</span>]))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</span><br><span class="hljs-selector-attr">[1, 2, 4, 6, 8, 10, 9, 7, 5, 3]</span><br><br><br></code></pre></td></tr></table></figure><h3 id="JZ38-二叉树的深度"><a href="#JZ38-二叉树的深度" class="headerlink" title="JZ38 二叉树的深度"></a>JZ38 二叉树的深度</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">TreeDepth</span>(<span class="hljs-params">self, pRoot</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pRoot:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        x = pRoot<br><br>        left = self.TreeDepth(pRoot.left)<br>        right = self.TreeDepth(pRoot.right)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left, right) + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">TreeDepth</span>(<span class="hljs-params">self, pRoot</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> pRoot <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        q = []<br>        depth = <span class="hljs-number">0</span><br>        q.append(pRoot)<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(q):  <span class="hljs-comment"># 队列为空时说明没有下一层</span><br>            length = <span class="hljs-built_in">len</span>(q)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):  <span class="hljs-comment"># 遍历层的每个节点看是否有子节点有则加入</span><br>                current = q.pop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># current为当前遍历到的层中节点，取出，注意pop(-1)为默认，这里要pop(0),取出第一个，先入先出</span><br>                <span class="hljs-keyword">if</span> current.left:<br>                    q.append(current.left)<br>                <span class="hljs-keyword">if</span> current.right:<br>                    q.append(current.right)<br>            depth += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> depth<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">0</span>)<br>    root<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">1</span>)<br>    root<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">2</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">3</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">4</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution2</span>()<span class="hljs-selector-class">.TreeDepth</span>(root))<br>    <br>&gt;&gt;&gt; <span class="hljs-number">4</span><br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="JZ60-把二叉树打印成多行"><a href="#JZ60-把二叉树打印成多行" class="headerlink" title="JZ60 把二叉树打印成多行"></a>JZ60 把二叉树打印成多行</h3><p><strong>题目描述：</strong></p><blockquote><p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vim">class TreeNode:<br>    def __init__(self, <span class="hljs-keyword">x</span>):<br>        self.val = <span class="hljs-keyword">x</span><br>        self.<span class="hljs-keyword">left</span> = None<br>        self.<span class="hljs-keyword">right</span> = None<br><br><br>class Solution:<br>    # 返回二维列表[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]<br>    def <span class="hljs-keyword">Print</span>(self, pRoot):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> not pRoot:<br>            <span class="hljs-keyword">return</span> []<br><br>        node_queue = [pRoot]<br>        <span class="hljs-keyword">res</span> = []<br>        <span class="hljs-keyword">while</span> node_queue:<br>            val = []<br>            length = <span class="hljs-built_in">len</span>(node_queue)<br>            <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(length):<br>                current = node_queue.<span class="hljs-keyword">pop</span>(<span class="hljs-number">0</span>)<br>                val.<span class="hljs-keyword">append</span>(current.val)<br><br>                <span class="hljs-keyword">if</span> current.<span class="hljs-keyword">left</span>:<br>                    node_queue.<span class="hljs-keyword">append</span>(current.<span class="hljs-keyword">left</span>)<br>                <span class="hljs-keyword">if</span> current.<span class="hljs-keyword">right</span>:<br>                    node_queue.<span class="hljs-keyword">append</span>(current.<span class="hljs-keyword">right</span>)<br><br>            <span class="hljs-keyword">res</span>.<span class="hljs-keyword">append</span>(val)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    root = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">8</span>)<br>    root<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br>    root<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">10</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    root<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">7</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">9</span>)<br>    root<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">11</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.Print</span>(root))<br><br>&gt;&gt;&gt; <span class="hljs-selector-attr">[[8]</span>, <span class="hljs-selector-attr">[6, 10]</span>, <span class="hljs-selector-attr">[5, 7, 9, 11]</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第六天</title>
    <link href="/blog/2020/07/13/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
    <url>/blog/2020/07/13/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ6-旋转数组的最小数字"><a href="#JZ6-旋转数组的最小数字" class="headerlink" title="JZ6 旋转数组的最小数字"></a>JZ6 旋转数组的最小数字</h3><p><strong>题目描述：</strong></p><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。<br>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p></blockquote><p><strong>解法思路：</strong><br>这题主要是考察二分查找。<strong>二分查找</strong>，又叫折半查找。它的前提是线性表中的数据必须是有序的，线性表必须采用顺序存储。主要思想是：在有序表中，去中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找；不断重复上述过程，直至查找成功，或所有查找区域无记录，查找失败为止。</p><p>上面介绍了二分查找的主要思路，而本题难点在于找到中间值与谁进行比较？ 再认真审下题，给定的是非递减排序的数组，也就是“平序”或升序。例如：<code>[1, 2, 3, 3, 3, 5, 6]</code>（“平序”），<code>[1, 2, 3, 4, 5, 6]</code>（升序）。然后再做旋转得到旋转数组<code>[3, 3, 5, 6, 1, 2, 3]</code>，<code>[4, 5, 6, 1, 2, 3]</code>，可以确定的是旋转后的数组<code>nums[0] &gt;= nums[-1]</code>恒成立。</p><p>这样也就得到了<code>nums[mid]</code>与哪个值进行比较了，当然是：</p><ul><li><code>nums[mid] &gt; nums[left]</code> , 这个时候 <code>left = mid + 1</code></li><li><code>nums[mid] &lt; nums[right]</code>, 这个时候 <code>right = mid</code></li><li><code>nums[mid] = nums[right]</code>, 这个时候 <code>left += 1</code></li></ul><p>这里可以一定意义上认为<code>nums[left]</code>与<code>nums[right]</code>近似相等，这样便于理解。</p><blockquote><p>注: 以上<code>nums</code>代表传入的旋转数组，<code>left</code>指数组的第一个数，<code>right</code>指数组末尾的数，<code>mid</code>指数组中间位置的数。</p></blockquote><span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vim">class Solution:<br>    def minNumberInRotateArray(self, rotateArray):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rotateArray) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">left</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">right</span> = <span class="hljs-built_in">len</span>(rotateArray) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">left</span> &lt; <span class="hljs-keyword">right</span>:<br>            <span class="hljs-keyword">if</span> rotateArray[<span class="hljs-keyword">left</span>] &lt; rotateArray[<span class="hljs-keyword">right</span>]:<br>                <span class="hljs-keyword">return</span> rotateArray[<span class="hljs-keyword">left</span>]<br><br>            mid = (<span class="hljs-keyword">left</span> + <span class="hljs-keyword">right</span>) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> rotateArray[mid] &gt; rotateArray[<span class="hljs-keyword">left</span>]:<br>                <span class="hljs-keyword">left</span> = mid + <span class="hljs-number">1</span><br>            elif rotateArray[mid] &lt; rotateArray[<span class="hljs-keyword">right</span>]:<br>                <span class="hljs-keyword">right</span> = mid<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">left</span> += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">return</span> rotateArray[<span class="hljs-keyword">left</span>]<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.minNumberInRotateArray</span>(<span class="hljs-selector-attr">[1, 0, 1, 1, 1]</span>))<br><br>&gt;&gt;&gt; <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h3 id="JZ18-二叉树的镜像"><a href="#JZ18-二叉树的镜像" class="headerlink" title="JZ18 二叉树的镜像"></a>JZ18 二叉树的镜像</h3><p><strong>题目描述：</strong></p><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像。<br> 二叉树的镜像定义如下：</p></blockquote><pre><code class="hljs"> 源二叉树    8   /  \  6   10 / \  / \5  7 9 11镜像二叉树     8   /  \  10   6 / \  / \11 9 7  5</code></pre><p><strong>解法思路：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回镜像树的根节点</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Mirror</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        root.left, root.right = \<br>            self.Mirror(root.right), self.Mirror(root.left)<br><br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-built_in">print</span>(root.val, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        self.preOrder(root.left)<br>        self.preOrder(root.right)<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    tree1 = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">8</span>)<br>    tree1<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br>    tree1<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">10</span>)<br>    tree1<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    tree1<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">7</span>)<br>    tree1<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">9</span>)<br>    tree1<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">11</span>)<br><br>    invert_tree = <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.Mirror</span>(tree1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.preOrder</span>(invert_tree))<br><br>&gt;&gt;&gt; <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> None<br></code></pre></td></tr></table></figure><h3 id="JZ23-二叉搜索树的后序遍历"><a href="#JZ23-二叉搜索树的后序遍历" class="headerlink" title="JZ23 二叉搜索树的后序遍历"></a>JZ23 二叉搜索树的后序遍历</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">class</span> Solution:<br>    def VerifySquenceOfBST(<span class="hljs-keyword">self</span>, <span class="hljs-keyword">sequence</span>):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> len(<span class="hljs-keyword">sequence</span>) == <span class="hljs-number">0</span>:<br>            return <span class="hljs-keyword">False</span><br><br>        root = <span class="hljs-keyword">sequence</span>[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">index</span>, value <span class="hljs-keyword">in</span> enumerate(<span class="hljs-keyword">sequence</span>):<br>            <span class="hljs-keyword">if</span> value &gt; root:<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-keyword">sequence</span>[<span class="hljs-keyword">index</span>: -<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">if</span> value &lt; root:<br>                return <span class="hljs-keyword">False</span><br><br>        left = <span class="hljs-keyword">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">index</span> &gt; <span class="hljs-number">0</span>:<br>            left = <span class="hljs-keyword">self</span>.VerifySquenceOfBST(<span class="hljs-keyword">sequence</span>[:<span class="hljs-keyword">index</span>])<br><br>        right = <span class="hljs-keyword">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">index</span> &lt; len(<span class="hljs-keyword">sequence</span>) - <span class="hljs-number">1</span>:<br>            right = <span class="hljs-keyword">self</span>.VerifySquenceOfBST(<span class="hljs-keyword">sequence</span>[<span class="hljs-keyword">index</span>: -<span class="hljs-number">1</span>])<br><br>        return left <span class="hljs-keyword">and</span> right<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    is_binary_tree = <span class="hljs-selector-attr">[1, 3, 5, 9, 12, 10, 7]</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.VerifySquenceOfBST</span>(is_binary_tree))<br><br>&gt;&gt;&gt; True<br></code></pre></td></tr></table></figure><h3 id="JZ67-剪绳子"><a href="#JZ67-剪绳子" class="headerlink" title="JZ67 剪绳子"></a>JZ67 剪绳子</h3><p><strong>题目描述：</strong></p><blockquote><p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1，m&lt;=n），每段绳子的长度记为 k[1],…,k[m]。请问 k[1]x…xk[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p></blockquote><blockquote><p>输入：8<br>输出：18 </p></blockquote><p><strong>解法思路：</strong></p><p><strong>代码测试：</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第五天</title>
    <link href="/blog/2020/07/13/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
    <url>/blog/2020/07/13/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ8-跳台阶"><a href="#JZ8-跳台阶" class="headerlink" title="JZ8 跳台阶"></a>JZ8 跳台阶</h3><p><strong>题目描述：</strong></p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p></blockquote><p><strong>解法思路：</strong></p><span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">class Solution:<br>    def jumpFloor(self, <span class="hljs-keyword">number</span>):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">number</span> &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">number</span><br><br>        <span class="hljs-keyword">res</span>, counter = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">number</span> + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">res</span> = <span class="hljs-keyword">res</span> + counter<br>            counter = <span class="hljs-keyword">res</span> - counter<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().jumpFloor(<span class="hljs-number">3</span>))</span><br><br>&gt;&gt;&gt; <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h3 id="JZ9-变态跳台阶"><a href="#JZ9-变态跳台阶" class="headerlink" title="JZ9 变态跳台阶"></a>JZ9 变态跳台阶</h3><p><strong>题目描述：</strong></p><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">jumpFloor</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">number</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">number</span> &lt;= <span class="hljs-symbol">2:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">return</span></span> <span class="hljs-symbol">number</span><br><br>        <span class="hljs-symbol">curr, <span class="hljs-symbol">prev</span></span> = <span class="hljs-symbol">1, <span class="hljs-symbol">1</span></span><br>        <span class="hljs-symbol">for</span> <span class="hljs-symbol">i</span> <span class="hljs-symbol">in</span> <span class="hljs-symbol">range</span>(<span class="hljs-symbol">1, <span class="hljs-symbol">number</span></span>):<br>            <span class="hljs-symbol">curr</span> = <span class="hljs-symbol">2</span> * <span class="hljs-symbol">prev</span><br>            <span class="hljs-symbol">prev</span> = <span class="hljs-symbol">curr</span><br><br>        <span class="hljs-symbol">return</span> <span class="hljs-symbol">curr</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().jumpFloor(<span class="hljs-number">3</span>))</span><br><br>&gt;&gt;&gt; <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="JZ10-矩形覆盖"><a href="#JZ10-矩形覆盖" class="headerlink" title="JZ10 矩形覆盖"></a>JZ10 矩形覆盖</h3><p><strong>题目描述：</strong></p><blockquote><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vim">class Solution:<br>    def rectCover(self, <span class="hljs-keyword">number</span>):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">number</span> &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">number</span><br><br>        <span class="hljs-keyword">res</span>, counter = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">number</span> + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">res</span> = <span class="hljs-keyword">res</span> + counter<br>            counter = <span class="hljs-keyword">res</span> - counter<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().rectCover(<span class="hljs-number">4</span>))</span><br><br>&gt;&gt;&gt; <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="JZ21-栈的压入、弹出序列"><a href="#JZ21-栈的压入、弹出序列" class="headerlink" title="JZ21 栈的压入、弹出序列"></a>JZ21 栈的压入、弹出序列</h3><p><strong>题目描述：</strong></p><blockquote><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。<br>例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。<br>（注意：这两个序列的长度是相等的）</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">IsPopOrder</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">pushV</span>, <span class="hljs-symbol">popV</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">pass</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第四天</title>
    <link href="/blog/2020/07/11/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <url>/blog/2020/07/11/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ4-重建二叉树"><a href="#JZ4-重建二叉树" class="headerlink" title="JZ4 重建二叉树"></a>JZ4 重建二叉树</h3><p><strong>题目描述：</strong></p><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列 [1,2,4,7,3,5,6,8] 和中序遍历序列 [4,7,2,1,5,3,8,6] ，则重建二叉树并返回。</p></blockquote><p><strong>解法思路：</strong><br>使用递归的方法求解。这道题需要对二叉树的性质比较了解，需要熟悉二叉树的几种遍历方式。</p><p><strong>前序遍历是先遍历根节点，然后遍历左节点，最后遍历右节点（根左右）</strong></p><p><strong>中序遍历是先遍历左节点，然后遍历根节点，最后遍历右节点（左根右）</strong></p><p><strong>后序遍历是先遍历左节点，然后遍历右节点，最后遍历根节点（根左右）</strong></p><p>本题给定前序遍历以及中序遍历的序列，可以知道前序遍历第一个值一定是根节点。而根节点在中序遍历中会把左右子树分成两半。因此本题的关键是找到根节点，然后将左右子树依次递归重建得到二叉树。</p><p>使用递归是需要结束条件的，当前序或中序遍历序列为<code>None</code>时，便可推出递归，得到二叉树。</p><span id="more"></span><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> TreeNode:<br>    def <span class="hljs-constructor">__init__(<span class="hljs-params">self</span>, <span class="hljs-params">x</span>)</span>:<br>        self.<span class="hljs-keyword">val</span> = x<br>        self.left = None<br>        self.right = None<br><br><br><span class="hljs-keyword">class</span> Solution:<br>    # 返回构造的TreeNode根节点<br>    def re<span class="hljs-constructor">ConstructBinaryTree(<span class="hljs-params">self</span>, <span class="hljs-params">pre</span>, <span class="hljs-params">tin</span>)</span>:<br>        <span class="hljs-keyword">if</span> not pre <span class="hljs-keyword">or</span> not tin:<br>            return None<br><br>        root = <span class="hljs-constructor">TreeNode(<span class="hljs-params">pre</span>.<span class="hljs-params">pop</span>(0)</span>)<br>        index = tin.index(root.<span class="hljs-keyword">val</span>)<br><br>        root.left = self.re<span class="hljs-constructor">ConstructBinaryTree(<span class="hljs-params">pre</span>, <span class="hljs-params">tin</span>[:<span class="hljs-params">index</span>])</span><br>        root.right = self.re<span class="hljs-constructor">ConstructBinaryTree(<span class="hljs-params">pre</span>, <span class="hljs-params">tin</span>[<span class="hljs-params">index</span> + 1:])</span><br><br>        return root<br><br>    def pre<span class="hljs-constructor">Order(<span class="hljs-params">self</span>, <span class="hljs-params">root</span>)</span>:<br>        <span class="hljs-keyword">if</span> root is None:<br>            return<br><br>        print(root.<span class="hljs-keyword">val</span>, <span class="hljs-keyword">end</span>=<span class="hljs-character">&#x27; &#x27;</span>)<br>        self.pre<span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>)</span><br>        self.pre<span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>)</span><br><br>    def <span class="hljs-constructor">InOrder(<span class="hljs-params">self</span>, <span class="hljs-params">root</span>)</span>:<br>        <span class="hljs-keyword">if</span> root is None:<br>            return<br>        self.<span class="hljs-constructor">InOrder(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>)</span><br>        print(root.<span class="hljs-keyword">val</span>, <span class="hljs-keyword">end</span>=<span class="hljs-character">&#x27; &#x27;</span>)<br>        self.<span class="hljs-constructor">InOrder(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>)</span><br><br>    def <span class="hljs-constructor">BackOrder(<span class="hljs-params">self</span>, <span class="hljs-params">root</span>)</span>:<br>        <span class="hljs-keyword">if</span> root is None:<br>            return<br>        self.<span class="hljs-constructor">BackOrder(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>)</span><br>        self.<span class="hljs-constructor">BackOrder(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>)</span><br>        print(root.<span class="hljs-keyword">val</span>, <span class="hljs-keyword">end</span>=<span class="hljs-character">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p>本题只需写好<code>reConstructBinaryTree</code>这个方法，上面代码其他三个函数是用来前序、中序以及后序遍历重建得到二叉树的，以方便大家调试。<br><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    pre = <span class="hljs-selector-attr">[1, 2, 4, 7, 3, 5, 6, 8]</span><br>    tin = <span class="hljs-selector-attr">[4, 7, 2, 1, 5, 3, 8, 6]</span><br><br>    reTree = <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.reConstructBinaryTree</span>(pre, tin)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;前序遍历：&quot;</span>)<br>    <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.preOrder</span>(reTree)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中序遍历：&quot;</span>)<br>    <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.InOrder</span>(reTree)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;后序遍历：&quot;</span>)<br>    <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.BackOrder</span>(reTree)<br><br>&gt;&gt;&gt; 前序遍历：<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <br><br>中序遍历：<br><span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <br><br>后序遍历：<br><span class="hljs-number">7</span> <span class="hljs-number">4</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <br><br></code></pre></td></tr></table></figure><h3 id="JZ18-二叉树的镜像"><a href="#JZ18-二叉树的镜像" class="headerlink" title="JZ18 二叉树的镜像"></a>JZ18 二叉树的镜像</h3><p><strong>题目描述：</strong></p><blockquote><p>操作给定的二叉树，将其变换为源二叉树的镜像。<br> 二叉树的镜像定义如下：</p></blockquote><pre><code class="hljs"> 源二叉树    8   /  \  6   10 / \  / \5  7 9 11镜像二叉树     8   /  \  10   6 / \  / \11 9 7  5</code></pre><p><strong>解法思路：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回镜像树的根节点</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Mirror</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        root.left, root.right = \<br>            self.Mirror(root.right), self.Mirror(root.left)<br><br>        <span class="hljs-keyword">return</span> root<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-built_in">print</span>(root.val, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        self.preOrder(root.left)<br>        self.preOrder(root.right)<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    tree1 = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">8</span>)<br>    tree1<span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">6</span>)<br>    tree1<span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">10</span>)<br>    tree1<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">5</span>)<br>    tree1<span class="hljs-selector-class">.left</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">7</span>)<br>    tree1<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.left</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">9</span>)<br>    tree1<span class="hljs-selector-class">.right</span><span class="hljs-selector-class">.right</span> = <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">11</span>)<br><br>    invert_tree = <span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.Mirror</span>(tree1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.preOrder</span>(invert_tree))<br><br>&gt;&gt;&gt; <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">5</span> None<br></code></pre></td></tr></table></figure><h3 id="JZ23-二叉搜索树的后序遍历"><a href="#JZ23-二叉搜索树的后序遍历" class="headerlink" title="JZ23 二叉搜索树的后序遍历"></a>JZ23 二叉搜索树的后序遍历</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">class</span> Solution:<br>    def VerifySquenceOfBST(<span class="hljs-keyword">self</span>, <span class="hljs-keyword">sequence</span>):<br>        # <span class="hljs-keyword">write</span> code here<br>        <span class="hljs-keyword">if</span> len(<span class="hljs-keyword">sequence</span>) == <span class="hljs-number">0</span>:<br>            return <span class="hljs-keyword">False</span><br><br>        root = <span class="hljs-keyword">sequence</span>[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">index</span>, value <span class="hljs-keyword">in</span> enumerate(<span class="hljs-keyword">sequence</span>):<br>            <span class="hljs-keyword">if</span> value &gt; root:<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-keyword">sequence</span>[<span class="hljs-keyword">index</span>: -<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">if</span> value &lt; root:<br>                return <span class="hljs-keyword">False</span><br><br>        left = <span class="hljs-keyword">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">index</span> &gt; <span class="hljs-number">0</span>:<br>            left = <span class="hljs-keyword">self</span>.VerifySquenceOfBST(<span class="hljs-keyword">sequence</span>[:<span class="hljs-keyword">index</span>])<br><br>        right = <span class="hljs-keyword">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">index</span> &lt; len(<span class="hljs-keyword">sequence</span>) - <span class="hljs-number">1</span>:<br>            right = <span class="hljs-keyword">self</span>.VerifySquenceOfBST(<span class="hljs-keyword">sequence</span>[<span class="hljs-keyword">index</span>: -<span class="hljs-number">1</span>])<br><br>        return left <span class="hljs-keyword">and</span> right<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    is_binary_tree = <span class="hljs-selector-attr">[1, 3, 5, 9, 12, 10, 7]</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.VerifySquenceOfBST</span>(is_binary_tree))<br><br>&gt;&gt;&gt; True<br></code></pre></td></tr></table></figure><h3 id="JZ67-剪绳子"><a href="#JZ67-剪绳子" class="headerlink" title="JZ67 剪绳子"></a>JZ67 剪绳子</h3><p><strong>题目描述：</strong></p><blockquote><p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1，m&lt;=n），每段绳子的长度记为 k[1],…,k[m]。请问 k[1]x…xk[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p></blockquote><blockquote><p>输入：8<br>输出：18 </p></blockquote><p><strong>解法思路：</strong></p><p><strong>代码测试：</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第三天</title>
    <link href="/blog/2020/07/08/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/blog/2020/07/08/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ11-二进制中1的个数"><a href="#JZ11-二进制中1的个数" class="headerlink" title="JZ11 二进制中1的个数"></a>JZ11 二进制中1的个数</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个整数，输出该数32位二进制表示中1的个数。其中负数用补码表示。</p></blockquote><p><strong>解法思路：</strong></p><span id="more"></span><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def NumberOf1(self, n):<br>    # write code here<br>    count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span>:<br>        n = n &amp; <span class="hljs-number">0b11111111111111111111111111111111</span><br><br>    <span class="hljs-keyword">while</span> n != <span class="hljs-number">0</span>:<br>        count += <span class="hljs-number">1</span><br>        n = n &amp; (n - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">return</span> count<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().NumberOf1(-<span class="hljs-number">11</span>))</span><br>    <br>&gt;&gt;&gt; <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="JZ27-字符串的排列"><a href="#JZ27-字符串的排列" class="headerlink" title="JZ27 字符串的排列"></a>JZ27 字符串的排列</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p></blockquote><blockquote><p>输入一个字符串，长度不超过9（可能有字符重复），字符只包括大小写字母。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">Permutation</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">ss</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">pass</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="JZ47-求1-2-3-…-n"><a href="#JZ47-求1-2-3-…-n" class="headerlink" title="JZ47 求1 + 2 + 3 + … + n"></a>JZ47 求1 + 2 + 3 + … + n</h3><p><strong>题目描述：</strong></p><blockquote><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Sum_Solution</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, n</span>):<br>        <span class="hljs-comment"># write code here</span><br>        res = n<br>        <span class="hljs-symbol">try:</span><br>            res % n<br>            res += <span class="hljs-variable language_">self</span>.Sum_Solution(n - <span class="hljs-number">1</span>)<br>        except <span class="hljs-symbol">ZeroDivisionError:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Sum_Solution</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, n</span>):<br>        <span class="hljs-comment"># write code here</span><br>        res = n<br>        tmp = (res <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.Sum_Solution(n - <span class="hljs-number">1</span>))<br>        res += tmp<br><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().Sum_Solution(<span class="hljs-number">5</span>))</span><br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution2</span>().Sum_Solution(<span class="hljs-number">6</span>))</span><br>    <br>&gt;&gt;&gt; <span class="hljs-number">15</span><br><span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><h3 id="JZ51-构建乘积数组"><a href="#JZ51-构建乘积数组" class="headerlink" title="JZ51 构建乘积数组"></a>JZ51 构建乘积数组</h3><p><strong>题目描述：</strong></p><blockquote><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]<em>A[1]</em>…<em>A[i-1]*A[i+1]</em>…*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * … * A[n-1]，B[n-1] = A[0] * A[1] * … * A[n-2];）</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">multiply</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">A</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">pass</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第二天</title>
    <link href="/blog/2020/07/07/%E5%89%91%E6%8C%87offer%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <url>/blog/2020/07/07/%E5%89%91%E6%8C%87offer%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ49-把字符串转化成整数"><a href="#JZ49-把字符串转化成整数" class="headerlink" title="JZ49 把字符串转化成整数"></a>JZ49 把字符串转化成整数</h3><p><strong>题目描述：</strong></p><blockquote><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0<br>输入描述：<br>输入一个字符串,包括数字字母符号,可以为空<br>输出描述：<br>如果是合法的数值表达则返回该数字，否则返回0</p></blockquote><blockquote><p>示例：<br>输入：<br>+2147483647<br>1a33<br>输出：<br>2147483647<br>0</p></blockquote><p><strong>解法思路：</strong><br>使用了一个很巧妙的方法，用一个字典将字符串”0”-“9”与数字0 - 9做一个映射，然后再用数学上计算一个数字的公式得出这个数。比如：<code>123 = (1 * 10 + 2 ) * 10 + 3</code>。需要注意字符串开头的正负号，从而判断得到的数字是整数还是负数。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">StrToInt</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        str2num = &#123;<br>            <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&quot;8&quot;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&quot;9&quot;</span>: <span class="hljs-number">9</span>,<br>            <span class="hljs-string">&quot;+&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;-&quot;</span>: -<span class="hljs-number">1</span><br>        &#125;<br><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        sign = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> str2num:<br>                <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;+&quot;</span>:<br>                    sign = str2num[<span class="hljs-string">&quot;+&quot;</span>]<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> c == <span class="hljs-string">&quot;-&quot;</span>:<br>                    sign = str2num[<span class="hljs-string">&quot;-&quot;</span>]<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> * <span class="hljs-number">10</span> + str2num[c]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span> * sign<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;-98210&quot;</span><br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().StrToInt(<span class="hljs-variable">s</span>))</span><br><br>&gt;&gt;&gt; <span class="hljs-number">98210</span><br></code></pre></td></tr></table></figure><h3 id="JZ7-斐波那契数列"><a href="#JZ7-斐波那契数列" class="headerlink" title="JZ7 斐波那契数列"></a>JZ7 斐波那契数列</h3><p><strong>题目描述：</strong></p><blockquote><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）(n&lt;=39)。</p></blockquote><p><strong>解法一思路：</strong><br>直接根据数学公式<code>f(n) = f(n - 1) + f(n - 2)</code>，截至条件是当<code>n = 1, f(n) = 1</code>，<code>n = 0, f(0) = 0</code>。利用<strong>递归法</strong>进行求解，这种方法时间复杂度很大，为<code>O(n^2)</code>，空间复杂度为<code>O(1)</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, n</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> n<br>        <span class="hljs-symbol">else:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.Fibonacci(n-<span class="hljs-number">1</span>) + <span class="hljs-variable language_">self</span>.Fibonacci(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><strong>解法二思路：</strong> </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution2:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">Fibonacci</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">n</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">n</span> &lt;= <span class="hljs-symbol">1:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">return</span></span> <span class="hljs-symbol">n</span><br><br>        <span class="hljs-symbol">n1, <span class="hljs-symbol">n2</span>, <span class="hljs-symbol">n3</span></span> = <span class="hljs-symbol">0, <span class="hljs-symbol">1</span>, <span class="hljs-symbol">0</span></span><br>        <span class="hljs-symbol">for</span> <span class="hljs-symbol">i</span> <span class="hljs-symbol">in</span> <span class="hljs-symbol">range</span>(<span class="hljs-symbol">1, <span class="hljs-symbol">n</span></span>):<br>            <span class="hljs-symbol">n3</span> = <span class="hljs-symbol">n1</span> + <span class="hljs-symbol">n2</span><br>            <span class="hljs-symbol">n1</span> = <span class="hljs-symbol">n2</span><br>            <span class="hljs-symbol">n2</span> = <span class="hljs-symbol">n3</span><br><br>        <span class="hljs-symbol">return</span> <span class="hljs-symbol">n3</span><br></code></pre></td></tr></table></figure><p><strong>解法三思路：</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">class</span> Solution3:<br>    def Fibonacci(self, <span class="hljs-keyword">n</span>):<br>        # write code here<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">n</span> &lt;= 1:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">n</span><br><br>        <span class="hljs-keyword">sum</span>, <span class="hljs-keyword">one</span> = 1, 0<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-keyword">range</span>(1, <span class="hljs-keyword">n</span>):<br>            <span class="hljs-keyword">sum</span> = <span class="hljs-keyword">sum</span> + <span class="hljs-keyword">one</span><br>            <span class="hljs-keyword">one</span> = <span class="hljs-keyword">sum</span> - <span class="hljs-keyword">one</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">sum</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> <span class="hljs-variable">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution</span>().Fibonacci(<span class="hljs-number">8</span>))</span><br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution2</span>().Fibonacci(<span class="hljs-number">8</span>))</span><br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-title">Solution3</span>().Fibonacci(<span class="hljs-number">8</span>))</span><br><br>&gt;&gt;&gt; <span class="hljs-number">21</span><br>&gt;&gt;&gt; <span class="hljs-number">21</span><br>&gt;&gt;&gt; <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><h3 id="JZ48-不用加减乘除做加法"><a href="#JZ48-不用加减乘除做加法" class="headerlink" title="JZ48 不用加减乘除做加法"></a>JZ48 不用加减乘除做加法</h3><p><strong>题目描述：</strong></p><blockquote><p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">Add</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">num1</span>, <span class="hljs-symbol">num2</span></span>):<br>        # <span class="hljs-symbol">write</span> <span class="hljs-symbol">code</span> <span class="hljs-symbol">here</span><br>        <span class="hljs-symbol">pass</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer 第一天</title>
    <link href="/blog/2020/07/06/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/blog/2020/07/06/%E5%89%91%E6%8C%87offer-%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="JZ16-合并两个排序的链表"><a href="#JZ16-合并两个排序的链表" class="headerlink" title="JZ16 合并两个排序的链表"></a>JZ16 合并两个排序的链表</h3><p><strong>题目描述：</strong></p><blockquote><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p></blockquote><p><strong>解法一思路：</strong><br>使用迭代的方法。先判断临界情况，依次判断输入的两个链表是否为空指针，如果有其中一个为空指针链表，则返回另一个有序的链表。</p><p>然后初始化一个新链表，依次比较两个有序链表的值，哪个链表的值较小，则新链表的指针指向该值。继续循环，依次比较，最终返回单调递增的新链表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-comment"># 返回合并后列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Merge</span>(<span class="hljs-params">self, pHead1, pHead2</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> pHead1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> pHead2<br>        <span class="hljs-keyword">if</span> pHead2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> pHead1<br><br>        node = sorted_node = ListNode(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">while</span> pHead1 <span class="hljs-keyword">and</span> pHead2:<br>            <span class="hljs-keyword">if</span> pHead1.val &lt; pHead2.val:<br>                node.<span class="hljs-built_in">next</span> = pHead1<br>                pHead1 = pHead1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node.<span class="hljs-built_in">next</span> = pHead2<br>                pHead2 = pHead2.<span class="hljs-built_in">next</span><br>            node = node.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">if</span> pHead1 <span class="hljs-keyword">or</span> pHead2:<br>            node.<span class="hljs-built_in">next</span> = pHead1 <span class="hljs-keyword">or</span> pHead2<br><br>        <span class="hljs-keyword">return</span> sorted_node.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel_list</span>(<span class="hljs-params">self, node</span>):<br>        <span class="hljs-keyword">while</span> node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(node.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>            node = node.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p><strong>解法二思路：</strong><br>使用递归的方法。大体思路同上，先判断临界情况，依次判断输入的两个链表是否为空指针，如果有其中一个为空指针链表，则返回另一个有序的链表。</p><p>然后依次比较两个有序链表的值，哪个链表的值较小，则将该节点赋值给新链表。使用递归，直至其中一个链表为None，最终返回和并得到的单调递增链表。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x</span>):<br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回合并后列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Merge</span>(<span class="hljs-params">self, pHead1, pHead2</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> pHead1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> pHead2<br>        <span class="hljs-keyword">if</span> pHead2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> pHead1<br><br>        <span class="hljs-keyword">if</span> pHead1.val &lt; pHead2.val:<br>            sorted_list = pHead1<br>            sorted_list.<span class="hljs-built_in">next</span> = self.Merge(pHead1.<span class="hljs-built_in">next</span>, pHead2)<br>        <span class="hljs-keyword">else</span>:<br>            sorted_list = pHead2<br>            sorted_list.<span class="hljs-built_in">next</span> = self.Merge(pHead1, pHead2.<span class="hljs-built_in">next</span>)<br><br>        <span class="hljs-keyword">return</span> sorted_list<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel_list</span>(<span class="hljs-params">self, node</span>):<br>        <span class="hljs-keyword">while</span> node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(node.val, end=<span class="hljs-string">&quot; &quot;</span>)<br>            node = node.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> __name__<span class="hljs-operator"> == </span><span class="hljs-string">&quot;__main__&quot;</span>:<br>    node_1 = <span class="hljs-constructor">ListNode(0)</span><br>    node_1.next = <span class="hljs-constructor">ListNode(4)</span><br>    node_1.next.next = <span class="hljs-constructor">ListNode(10)</span><br>    node_2 = <span class="hljs-constructor">ListNode(2)</span><br>    node_2.next = <span class="hljs-constructor">ListNode(3)</span><br>    node_2.next.next = <span class="hljs-constructor">ListNode(12)</span><br>    solu_1 = <span class="hljs-constructor">Solution()</span><br>    # print(solu_1.travel<span class="hljs-constructor">_list(<span class="hljs-params">solu_1</span>.Merge(<span class="hljs-params">node_1</span>, <span class="hljs-params">node_2</span>)</span>))<br>    solu_2 = <span class="hljs-constructor">Solution2()</span><br>    print(solu_2.travel<span class="hljs-constructor">_list(<span class="hljs-params">solu_2</span>.Merge(<span class="hljs-params">node_1</span>, <span class="hljs-params">node_2</span>)</span>))<br><br>&gt;&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">10</span> <span class="hljs-number">12</span> None<br></code></pre></td></tr></table></figure><h3 id="JZ14-链表中倒数第k个结点"><a href="#JZ14-链表中倒数第k个结点" class="headerlink" title="JZ14 链表中倒数第k个结点"></a>JZ14 链表中倒数第k个结点</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个链表，输出该链表中倒数第k个结点。</p></blockquote><p><strong>解法一思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ruby">lass <span class="hljs-symbol">ListNode:</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = None<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 时间复杂度： O(n)</span><br>    <span class="hljs-comment"># 空间复杂度： O(n)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">FindKthToTail</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, head, k</span>):<br>        <span class="hljs-comment"># write code here</span><br>        res = []<br><br>        <span class="hljs-keyword">while</span> head is <span class="hljs-keyword">not</span> <span class="hljs-symbol">None:</span><br>            res.insert(<span class="hljs-number">0</span>, head.val)<br>            head = head.<span class="hljs-keyword">next</span><br><br>        <span class="hljs-keyword">if</span> len(res) &lt; k <span class="hljs-keyword">or</span> k &lt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">return</span> res[k-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel_listNode</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, listNode</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">listNode:</span><br>            print(listNode.val, <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot; &quot;</span>)<br>            listNode = listNode.<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p><strong>解法二思路：</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution2</span>:<br>    <span class="hljs-meta"># 时间复杂度： O(n)</span><br>    <span class="hljs-meta"># 空间复杂度： O(1)</span><br>    def FindKthToTail(self, head, k):<br>        <span class="hljs-meta"># write code here</span><br>        <span class="hljs-keyword">if</span> k &lt; <span class="hljs-number">0</span> or head <span class="hljs-keyword">is</span> None:<br>            <span class="hljs-keyword">return</span><br><br>        slow, fast = head, head<br>        <span class="hljs-keyword">count</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> fast.<span class="hljs-keyword">next</span> <span class="hljs-keyword">is</span> not None:<br>            fast = fast.<span class="hljs-keyword">next</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">count</span> &gt;= k - <span class="hljs-number">1</span>:<br>                slow = slow.<span class="hljs-keyword">next</span><br>            <span class="hljs-keyword">count</span> += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">count</span> &gt;= k - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> slow.val<br><br>        <span class="hljs-keyword">return</span> None<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    curr = head = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>)<br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>) <br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.travel_listNode</span>(curr))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.FindKthToTail</span>(curr, <span class="hljs-number">5</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution2</span>()<span class="hljs-selector-class">.FindKthToTail</span>(curr, <span class="hljs-number">5</span>))<br><br>&gt;&gt;&gt; <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> None<br>&gt;&gt;&gt; <span class="hljs-number">0</span><br>&gt;&gt;&gt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="JZ15-反转链表"><a href="#JZ15-反转链表" class="headerlink" title="JZ15 反转链表"></a>JZ15 反转链表</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个链表，反转链表后，输出新链表的表头。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = None<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回ListNode</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ReverseList</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, pHead</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pHead <span class="hljs-keyword">or</span> pHead.<span class="hljs-keyword">next</span> is <span class="hljs-symbol">None:</span><br>            <span class="hljs-keyword">return</span> pHead<br><br>        curr, prev = pHead, None<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">curr:</span><br>            tmp = curr.<span class="hljs-keyword">next</span><br>            curr.<span class="hljs-keyword">next</span> = prev<br>            prev = curr<br>            curr = tmp<br><br>        <span class="hljs-keyword">return</span> prev<br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    curr = head = ListNode(<span class="hljs-number">0</span>)<br>    head.<span class="hljs-keyword">next</span> = ListNode(<span class="hljs-number">1</span>)<br>    head = head.<span class="hljs-keyword">next</span><br>    head.<span class="hljs-keyword">next</span> = ListNode(<span class="hljs-number">2</span>)<br>    head = head.<span class="hljs-keyword">next</span><br>    head.<span class="hljs-keyword">next</span> = ListNode(<span class="hljs-number">3</span>)<br>    head = head.<span class="hljs-keyword">next</span><br>    # <span class="hljs-keyword">print</span>(head)<br>    <span class="hljs-keyword">print</span>(curr)<br><br>    <span class="hljs-keyword">res</span> = Solution().ReverseList(curr)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">res</span>)<br></code></pre></td></tr></table></figure><h3 id="JZ13-从尾到头打印链表"><a href="#JZ13-从尾到头打印链表" class="headerlink" title="JZ13 从尾到头打印链表"></a>JZ13 从尾到头打印链表</h3><p><strong>题目描述：</strong></p><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p></blockquote><p><strong>解法思路：</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, x</span>):<br>        <span class="hljs-variable language_">self</span>.val = x<br>        <span class="hljs-variable language_">self</span>.<span class="hljs-keyword">next</span> = None<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printListFromTailToHead</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, listNode</span>):<br>        <span class="hljs-comment"># write code here</span><br>        res = []<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">listNode:</span><br>            res.insert(<span class="hljs-number">0</span>, listNode.val)<br>            listNode = listNode.<span class="hljs-keyword">next</span><br><br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel_listNode</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, listNode</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-symbol">listNode:</span><br>            print(listNode.val, <span class="hljs-keyword">end</span>=<span class="hljs-string">&quot; &quot;</span>)<br>            listNode = listNode.<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p><strong>代码测试：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    curr = head = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>)<br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">2</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">3</span>)<br>    head = head<span class="hljs-selector-class">.next</span><br>    head<span class="hljs-selector-class">.next</span> = <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">4</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.travel_listNode</span>(curr))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">Solution</span>()<span class="hljs-selector-class">.printListFromTailToHead</span>(curr))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>剑指offer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NLP（1）文本分类知识梳理</title>
    <link href="/blog/2020/06/27/NLP%EF%BC%881%EF%BC%89%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <url>/blog/2020/06/27/NLP%EF%BC%881%EF%BC%89%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
      <category>文本分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文本分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python之函数式编程模块（2）</title>
    <link href="/blog/2020/06/19/Python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9D%97%EF%BC%882%EF%BC%89/"/>
    <url>/blog/2020/06/19/Python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9D%97%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这篇文章主要是讲解一些函数式编程常用的模块，比如：<code>itertools</code>, <code>functools</code>以及<code>operator</code>。</p><h2 id="一、itertools-–用以创建迭代器的模块"><a href="#一、itertools-–用以创建迭代器的模块" class="headerlink" title="一、itertools –用以创建迭代器的模块"></a>一、itertools –用以创建迭代器的模块</h2><span id="more"></span><h2 id="二、functools-–-高阶函数可调用对象上的操作"><a href="#二、functools-–-高阶函数可调用对象上的操作" class="headerlink" title="二、functools – 高阶函数可调用对象上的操作"></a>二、functools – 高阶函数可调用对象上的操作</h2><h2 id="三、operator-–-标准运算符替代函数"><a href="#三、operator-–-标准运算符替代函数" class="headerlink" title="三、operator – 标准运算符替代函数"></a>三、operator – 标准运算符替代函数</h2><p>在函数式编程中，我们经常需要把算术运算符当作函数使用，因此可以借助operator模块。operator 模块提供了一套与Python的内置运算符对应的高效率函数。例如，operator.add(x, y) 与表达式 x+y 相同。</p><p>operator 模块为多个算术运算符提供了对应的函数，从而避免编写<br><code>lambda a, b: a * b</code> 这种平凡的匿名函数。这两种做法具体如下：</p><ul><li>使用<code>lambda a, b: a * b</code>匿名函数来计算阶乘：</li></ul><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> mul</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fact</span>(<span class="hljs-params">n</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">return</span> reduce(mul, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))</span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">fact(<span class="hljs-number">5</span>)</span><br>120<br><br></code></pre></td></tr></table></figure><ul><li>使用<code>operator.mul</code>函数来计算阶乘：</li></ul><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> mul</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fact</span>(<span class="hljs-params">n</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">    <span class="hljs-keyword">return</span> reduce(mul, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))</span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">fact(<span class="hljs-number">5</span>)</span><br>120<br><br></code></pre></td></tr></table></figure><p>operator 模块中还有一类函数，能替代从系列中取出元素或读取对象属性的lambda表达式：</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数式编程</tag>
      
      <tag>高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python之函数式编程模块（1）</title>
    <link href="/blog/2020/06/19/Python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9D%97/"/>
    <url>/blog/2020/06/19/Python%E4%B9%8B%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="一、编程方式介绍"><a href="#一、编程方式介绍" class="headerlink" title="一、编程方式介绍"></a>一、编程方式介绍</h2><p>一般编程语言支持通过以下几种方式来解决具体的问题：</p><ul><li>大多数的编程语言都是<strong>过程式</strong>的，也就是我们常说的面向过程的编程方式。而所谓程序是指令的列表，告诉计算机如何处理程序的输入。C、Pascal甚至Unix shell都是过程式语言。</li><li>然后有一些编程语言是<strong>声明式</strong>的，主要是你需要编写一个用来描述待解决问题的说明，然后这个语言的具体实现会指明怎样高效的进行计算并解决问题。SQL 可能是你最熟悉的声明式语言了。 一个 SQL 查询语句描述了你想要检索的数据集，并且 SQL 引擎会决定是扫描整张表还是使用索引，应该先执行哪些子句等等。</li><li><strong>面向对象</strong>编程语言会操作一组对象。其中对象拥有内部状态，并能够以某种方式支持请求和修改这个内部状态的方法。Smalltalk 和 Java 都是面向对象的语言。C++ 和 Python 支持面向对象编程，但并不强制使用面向对象特性。</li><li>而<strong>函数式</strong>编程则是将一个问题分解成一系列函数。理想情况下，函数只接受输入并产生输出，没有任何内部状态会影响为给定输入产生的输出。众所周知的函数式语言包括ML家族(标准ML、OCaml和其他变体)和Haskell。</li></ul><span id="more"></span><p>一般语言设计者在设计语言时，会选择侧重强调一种特定的编程方式，但这会让以不同方式来编写程序变得困难。因此有些语言就被设计成多范式语言，用以支持以上几种不同的编程方式。其中<strong>Lisp，C++ 和 Python 都是多范式语言；使用这些语言，你可以编写主要为过程式，面向对象或者函数式的程序和函数库。</strong>在大型程序中，不同的部分可能会采用不同的方式编写；比如 GUI 可能是面向对象的而处理逻辑则是过程式或者函数式。</p><p>这篇文章主要是来讲解函数式编程，因此接下来主要围绕函数式编程进行展开。</p><h2 id="二、函数式编程"><a href="#二、函数式编程" class="headerlink" title="二、函数式编程"></a>二、函数式编程</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>函数式编程：即为给定输入，输入会流经一系列函数，每个函数接收输入并输出结果。并且这个过程，在每个函数内部并不会修改全局变量或者有其他副作用。函数式编程允许把函数本身作为参数传入另一个函数，还允许返回一个函数。</p><h3 id="2-2-特点"><a href="#2-2-特点" class="headerlink" title="2.2 特点"></a>2.2 特点</h3><p>函数式风格有其理论和实践上的优点：</p><ul><li>形式证明</li><li>模块化</li><li>组合性</li><li>易于调试和测试</li></ul><h2 id="三、函数式编程实践"><a href="#三、函数式编程实践" class="headerlink" title="三、函数式编程实践"></a>三、函数式编程实践</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数式编程</tag>
      
      <tag>高级语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first post</title>
    <link href="/blog/2020/06/18/My-first-post/"/>
    <url>/blog/2020/06/18/My-first-post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
